{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Autogenerated documentation for a project serves a primary purpose by providing a reference guide to the system's architecture, functionality, and usage. It facilitates technical assessment and discovery.</p>"},{"location":"build.gradle/","title":"build.gradle","text":""},{"location":"build.gradle/#overview","title":"Overview","text":"<p>The <code>build.gradle</code> file is a configuration file for the Gradle build system. It is used to define the build configuration and dependencies for a software project built with Gradle.</p>"},{"location":"build.gradle/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"build.gradle/#prerequisites","title":"Prerequisites","text":"<ul> <li>Gradle build system</li> </ul>"},{"location":"build.gradle/#usage","title":"Usage","text":"<p>To use the <code>build.gradle</code> file in a project, simply place it in the root directory of the project. The file defines the project's dependencies, plugins, and tasks, and these will be automatically picked up by the Gradle build system.</p>"},{"location":"build.gradle/#methods","title":"Methods","text":"<p>The <code>build.gradle</code> file includes the following key sections: - Plugins: Defines the plugins used in the project, along with their versions. - Apply plugin: Applies the specified plugins to the project. - Group and version: Defines the group and version of the project. - Repositories: Specifies the Maven repository for fetching dependencies. - Dependencies: Defines the project's dependencies, including implementation, runtime, development, and test dependencies. - Tasks: Includes the configuration for the 'test' task, specifying the use of JUnit platform.</p>"},{"location":"build.gradle/#useful-details","title":"Useful details","text":"<ul> <li>Plugins: <code>java</code>, <code>org.springframework.boot</code>, <code>io.spring.dependency-management</code>, <code>org.graalvm.buildtools.native</code>, <code>io.spring.javaformat</code></li> <li>Dependencies: Various Spring Boot starters, cache-api, javax.xml.bind-api, webjars for Bootstrap and Font Awesome, caffeine, H2 database, MySQL connector, PostgreSQL, Spring Boot test dependencies</li> <li>Java version: sourceCompatibility set to '17'</li> <li>Versions: <code>webjarsFontawesomeVersion = \"4.7.0\"</code>, <code>webjarsBootstrapVersion = \"5.3.2\"</code></li> </ul> <p>The <code>build.gradle</code> file plays a crucial role in defining the project's build configuration, including the required dependencies and plugins. It enables the Gradle build system to build, test, and package the project according to the specified configuration.</p>"},{"location":"discovery/","title":"Technical Discovery","text":""},{"location":"discovery/#whats-the-programming-language-and-its-version-the-project-written-with","title":"What's the programming language and its version the project written with?","text":"<p>The programming language used in the project is Java, and the version specified in the <code>pom.xml</code> file properties is Java 17.</p>"},{"location":"discovery/#whats-the-framework-and-its-version-the-project-written-with","title":"What's the framework and its version the project written with?","text":"<p>The project uses the Spring Boot framework, and it is set to use the version defined by the parent dependency <code>spring-boot-starter-parent</code> with the version <code>3.2.1</code>.</p>"},{"location":"discovery/#whats-the-building-tool-and-its-version-the-project-written-with","title":"What's the building tool and its version the project written with?","text":"<p>The project uses Maven as the build tool, and it is using version 3.2.1 of the <code>spring-boot-starter-parent</code> as the parent POM, which implies compatibility with that version or similar of Maven.</p>"},{"location":"discovery/#whats-the-deployment-tool-and-its-version-the-project-written-with","title":"What's the deployment tool and its version the project written with?","text":"<p>The deployment tool used for the project is Maven, and the version used is 3.9.5 as specified in the <code>.mvn/wrapper/maven-wrapper.properties</code> file.</p>"},{"location":"discovery/#whats-the-testing-tool-and-its-version-the-project-written-with","title":"What's the testing tool and its version the project written with?","text":"<p>The project uses Testcontainers with JUnit Jupiter for testing. The version information is not provided in the context.</p>"},{"location":"discovery/#if-struts-jsp-jsf-technologies-are-used-in-the-project","title":"If Struts, JSP, JSF technologies are used in the project?","text":"<p>No, the project uses Spring Boot with Thymeleaf for its web layer and does not utilize Struts, JSP, or JSF technologies.</p>"},{"location":"discovery/#what-types-of-ejb-beans-are-used-in-he-project","title":"What types of EJB beans are used in he project?","text":"<p>The provided context does not indicate the usage of any Enterprise JavaBeans (EJB) in the project.</p>"},{"location":"discovery/#whats-the-external-libraries-and-api-are-used-at-the-project","title":"What's the external libraries and API are used at the project?","text":"<p>The project utilizes the following external libraries and APIs:</p> <ol> <li>Spring Boot starter libraries for creating web applications, data access with JPA, caching, validation, and actuator endpoints.</li> <li>Webjars for client-side dependencies like Bootstrap and Font Awesome.</li> <li>Database connectors for H2, MySQL, and PostgreSQL.</li> <li>Caching API - JCache API and Caffeine.</li> <li>Jakarta XML Binding API.</li> <li>Testcontainers for integration tests with databases.</li> <li>Spring Boot DevTools for development-time features.</li> <li>JUnit Jupiter for testing in conjunction with Testcontainers.</li> </ol>"},{"location":"discovery/#check-if-there-is-existing-cicd-pipelines-in-the-project","title":"Check if there is existing CI/CD pipelines in the project?","text":"<p>Yes, there is a GitHub Actions workflow defined in the <code>.github/workflows/maven-build.yml</code> file, which sets up a CI pipeline to build a Java project with Maven upon pushes and pull requests to the main branch.</p>"},{"location":"discovery/#whats-the-technology-of-cicd-pipeline-and-its-version","title":"What's the technology of CI/CD pipeline and its version?","text":"<p>The technology behind the CI/CD pipelines for this project is GitHub Actions, as defined in the <code>.github/workflows/maven-build.yml</code> file. There is no explicit version mentioned for GitHub Actions itself since it is a hosted service provided by GitHub, but the workflow uses version 4 of the <code>actions/checkout</code> action and version 4 of the <code>actions/setup-java</code> action.</p>"},{"location":"discovery/#check-if-there-is-any-quality-gates-in-the-existing-cicd-pipeline","title":"Check if there is any quality gates in the existing CI/CD pipeline?","text":"<p>Based on the provided context, there is no direct indication of quality gates being implemented in the CI/CD pipeline configuration. The <code>.github/workflows/maven-build.yml</code> file shows a GitHub Actions workflow that only includes steps for checking out the code and building the project with Maven. There are no steps visible in this file that would suggest additional quality checks, such as running tests or static code analysis tools as part of the pipeline execution.</p>"},{"location":"discovery/#analyze-cicd-pipelines-for-url-names-namespace-terms-for-the-next-injections-dev-prod-uat-test-and-use-that-information-to-guess-the-number-of-deployment-environments-and-their-names","title":"Analyze CI/CD pipelines for URL, names, namespace terms for the next injections: 'dev', 'prod', 'uat', 'test' and use that information to guess the number of deployment environments and their names.","text":"<p>Based on the provided context, there is no explicit information about CI/CD pipelines, environment names, or namespace terms such as 'dev', 'prod', 'uat', or 'test'. The context mainly covers details about building, testing, and running the Spring PetClinic application, but does not mention deployment environments or CI/CD configurations. Therefore, I'm unable to deduce the quantity and names of deployment environments from the given context.</p>"},{"location":"discovery/#check-if-custom-libraries-are-used-for-secrets-encryption-list-secrets-encryption-libraries-if-any","title":"Check if custom libraries are used for secrets encryption. List secrets encryption libraries if any.","text":"<p>Based on the provided context, there is no mention of any libraries being utilized for secrets encryption within the <code>pom.xml</code> files. Therefore, I cannot confirm the use of any secrets encryption libraries.</p>"},{"location":"discovery/#check-if-passwords-are-hard-coded-in-code","title":"Check if passwords are hard-coded in code.","text":"<p>Based on the provided context, there is no evidence of hard-coded passwords in the code.</p>"},{"location":"discovery/#check-is-ssl-connection-used-between-this-app-and-a-db","title":"Check is SSL connection used between this app and a DB.","text":"<p>Based on the provided context, there is no explicit configuration that suggests an SSL connection is being utilized for communication between the application and the database. The database connection URLs in the <code>application-postgres.properties</code> and <code>application-mysql.properties</code> files do not include SSL parameters.</p>"},{"location":"discovery/#check-if-api-requires-secure-connection-https-ssl-if-any","title":"Check if API requires secure connection (https, ssl ) if any.","text":"<p>The provided context does not contain any explicit information indicating that the API requires a secure connection such as HTTPS or SSL. The <code>petclinic_test_plan.jmx</code> file includes <code>HTTPSampler</code> elements without specifying the protocol as HTTPS, suggesting that the test plan may not be specifically designed for secure connections. However, without seeing the actual configuration of the application or its deployment settings, I cannot definitively state whether the API requires a secure connection.</p>"},{"location":"discovery/#check-if-there-are-unit-tests-exists-and-if-it-is-so-print-the-technologies-list","title":"Check if there are unit tests exists and if it is so, print the technologies list.","text":"<p>Yes, there are unit tests in place. The technologies utilized for testing in the project include:</p> <ul> <li>JUnit Jupiter (JUnit 5) for writing test cases, as seen in the use of the <code>@Test</code> annotation.</li> <li>Spring Boot Test framework, indicated by the use of <code>@SpringBootTest</code> and related annotations.</li> <li>Testcontainers for integration testing with real databases, as shown by dependencies on <code>spring-boot-testcontainers</code> and specific Testcontainers like <code>mysql</code>.</li> <li>Mockito, suggested by the use of <code>@MockBean</code> for mocking dependencies in tests.</li> <li>Spring MVC Test framework, for testing MVC controllers, indicated by the use of <code>MockMvc</code>.</li> <li>RestTemplateBuilder for creating instances of <code>RestTemplate</code> for testing RESTful endpoints.</li> </ul>"},{"location":"discovery/#check-if-there-are-integration-tests-that-uses-real-database","title":"Check if there are integration tests that uses real database.","text":"<p>Yes, there are integration tests that utilize real databases. The <code>MySqlIntegrationTests</code> class uses Testcontainers to start a MySQL database in a Docker container for testing, and the <code>PostgresIntegrationTests</code> class uses Docker Compose to start a PostgreSQL database for testing.</p>"},{"location":"discovery/#check-if-there-are-user-friendly-api-description","title":"Check if there are user friendly API description.","text":"<p>Based on the provided context, there is no explicit mention of a user-friendly API description available within the given files. However, there is a reference to a presentation about understanding the Spring Petclinic application which might contain further information about the application's structure and possibly its API. The link to the presentation is found in the readme.md file:</p> <pre><code>[See the presentation here](https://speakerdeck.com/michaelisvy/spring-petclinic-sample-application)\n</code></pre> <p>For a detailed API description, one would typically look for API documentation, a Swagger UI, or similar, none of which are explicitly mentioned in the provided context.</p>"},{"location":"discovery/#check-if-there-are-hardcoded-ip-addresses","title":"Check if there are hardcoded IP addresses.","text":"<p>No, there are no hardcoded IP addresses present in the provided context.</p>"},{"location":"docker-compose.yml/","title":"docker-compose.yml","text":""},{"location":"docker-compose.yml/#overview","title":"Overview","text":"<p>The <code>docker-compose.yml</code> file is used to define and run multi-container Docker applications. It specifies the services, networks, and volumes for a project, as well as the configuration of each service. In this specific file, it is used to define two database services, MySQL and PostgreSQL, for a project.</p>"},{"location":"docker-compose.yml/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"docker-compose.yml/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed on the host machine</li> <li>Docker Compose version 2.2</li> </ul>"},{"location":"docker-compose.yml/#usage","title":"Usage","text":"<p>To use this <code>docker-compose.yml</code> file in a project, follow these steps: 1. Make sure Docker and Docker Compose are installed on the host machine. 2. Create a new directory for your project and place the <code>docker-compose.yml</code> file in it. 3. Open a terminal and navigate to the project directory. 4. Run the following command to start the defined services:    <pre><code>docker-compose up\n</code></pre></p>"},{"location":"docker-compose.yml/#methods","title":"Methods","text":"<p>This file does not contain any methods or functions, as it is used to define the configuration of Docker services for a project.</p>"},{"location":"docker-compose.yml/#useful-details","title":"Useful details","text":"<ul> <li>Docker Compose version: \"2.2\"</li> <li>Services defined:</li> <li>MySQL:<ul> <li>Image: mysql:8.2</li> <li>Ports: 3306</li> <li>Environment variables:</li> <li>MYSQL_ROOT_PASSWORD</li> <li>MYSQL_ALLOW_EMPTY_PASSWORD</li> <li>MYSQL_USER</li> <li>MYSQL_PASSWORD</li> <li>MYSQL_DATABASE</li> <li>Volumes: ./conf.d:/etc/mysql/conf.d</li> <li>Profiles: mysql</li> </ul> </li> <li>PostgreSQL:<ul> <li>Image: postgres:16.1</li> <li>Ports: 5432</li> <li>Environment variables:</li> <li>POSTGRES_PASSWORD</li> <li>POSTGRES_USER</li> <li>POSTGRES_DB</li> <li>Profiles: postgres</li> </ul> </li> </ul>"},{"location":"pom.xml/","title":"pom.xml","text":""},{"location":"pom.xml/#overview","title":"Overview","text":"<p>The <code>pom.xml</code> file is an XML file that serves as the configuration file for a Maven project. It contains information about the project, its dependencies, build settings, and other project-specific configurations. The <code>pom.xml</code> file plays a crucial role in a software project as it defines the project structure, manages dependencies, and specifies build configurations.</p>"},{"location":"pom.xml/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"pom.xml/#prerequisites","title":"Prerequisites","text":"<p>There are no prerequisites required to use the <code>pom.xml</code> file. However, it is assumed that the user has a basic understanding of Maven and the project's dependencies.</p>"},{"location":"pom.xml/#usage","title":"Usage","text":"<p>To use the <code>pom.xml</code> file in a project, follow these steps: 1. Create a new Maven project or open an existing one. 2. Place the <code>pom.xml</code> file in the root directory of the project. 3. Update the necessary configurations, such as project information, dependencies, and build settings, according to the project's requirements. 4. Save the <code>pom.xml</code> file.</p>"},{"location":"pom.xml/#methods","title":"Methods","text":"<p>The <code>pom.xml</code> file does not contain any methods or functions. Instead, it defines various elements and configurations using XML tags. Here are some key elements in the <code>pom.xml</code> file:</p> <ul> <li><code>&lt;project&gt;</code>: The root element of the <code>pom.xml</code> file.</li> <li><code>&lt;groupId&gt;</code>: Specifies the group ID of the project.</li> <li><code>&lt;artifactId&gt;</code>: Specifies the artifact ID of the project.</li> <li><code>&lt;version&gt;</code>: Specifies the version of the project.</li> <li><code>&lt;dependencies&gt;</code>: Contains the list of project dependencies.</li> <li><code>&lt;build&gt;</code>: Contains build-related configurations and plugins.</li> </ul> <p>Here's an example of a dependency definition in the <code>pom.xml</code> file: <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Other dependencies --&gt;\n&lt;/dependencies&gt;\n</code></pre></p>"},{"location":"pom.xml/#useful-details","title":"Useful details","text":"<p>Here are some useful details about the <code>pom.xml</code> file:</p> <ul> <li>The file uses the XML format.</li> <li>It follows the Maven POM (Project Object Model) schema.</li> <li>The file includes various properties that can be used to define values that are reused throughout the file.</li> <li>It specifies dependencies using the <code>&lt;dependencies&gt;</code> element, where each <code>&lt;dependency&gt;</code> tag represents a single dependency.</li> <li>The file includes plugins that provide additional functionality during the build process, such as code formatting, code style checking, and code coverage analysis.</li> <li>It defines repositories and plugin repositories to specify the locations where dependencies and plugins can be downloaded from.</li> <li>The <code>pom.xml</code> file includes profiles that can be activated to customize the build process based on specific conditions, such as the presence of a certain property or environment variable.</li> </ul>"},{"location":"settings.gradle/","title":"settings.gradle","text":""},{"location":"settings.gradle/#overview","title":"Overview","text":"<p>The <code>settings.gradle</code> file is a configuration file used in Gradle-based projects. It defines the settings for the Gradle build system, including the project name and any additional configurations.</p> <p>This file plays a crucial role in setting up the project structure and defining the modules or sub-projects that are part of the overall project.</p>"},{"location":"settings.gradle/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"settings.gradle/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites for the <code>settings.gradle</code> file. However, it is assumed that the project is using Gradle as the build system.</p>"},{"location":"settings.gradle/#usage","title":"Usage","text":"<p>The <code>settings.gradle</code> file is typically located in the root directory of the project. It can be used to define the project name and any additional configurations related to the project structure.</p> <p>Example usage in <code>settings.gradle</code>: <pre><code>rootProject.name = 'my-project'\n</code></pre></p>"},{"location":"settings.gradle/#useful-details","title":"Useful details","text":"<p>The <code>settings.gradle</code> file does not contain methods or functions. It mainly consists of property assignments and configurations related to the Gradle project.</p> <p>Additional details such as Gradle version, plugin versions, and other dependencies may also be specified in this file.</p> <p>It is important to ensure that the project name and any other configurations in this file are accurately set to reflect the project's structure and dependencies.</p>"},{"location":"gradle/wrapper/gradle-wrapper.properties/","title":"gradle-wrapper.properties","text":""},{"location":"gradle/wrapper/gradle-wrapper.properties/#overview","title":"Overview","text":"<p>The <code>gradle-wrapper.properties</code> file is used to configure the Gradle wrapper, which is a script that invokes a declared version of Gradle, downloading it beforehand if necessary. This file specifies the distribution URL, network timeout, and other settings for the Gradle wrapper.</p>"},{"location":"gradle/wrapper/gradle-wrapper.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"gradle/wrapper/gradle-wrapper.properties/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the <code>gradle-wrapper.properties</code> file. However, it is important to have an understanding of Gradle and its wrapper functionality in order to effectively utilize this file.</p>"},{"location":"gradle/wrapper/gradle-wrapper.properties/#usage","title":"Usage","text":"<p>To use the <code>gradle-wrapper.properties</code> file in a project, it should be placed in the <code>gradle/wrapper</code> directory within the project's structure. The properties in this file can be customized to define the behavior of the Gradle wrapper. For example, to change the distribution URL to a specific version of Gradle, the <code>distributionUrl</code> property can be modified accordingly.</p> <pre><code>distributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-bin.zip\n</code></pre>"},{"location":"gradle/wrapper/gradle-wrapper.properties/#useful-details","title":"Useful details","text":"<ul> <li><code>distributionBase</code>: Specifies the base directory for storing the Gradle distribution.</li> <li><code>distributionPath</code>: Specifies the path within the base directory where the Gradle distribution is stored.</li> <li><code>distributionUrl</code>: Specifies the URL from which the Gradle distribution is downloaded.</li> <li><code>networkTimeout</code>: Specifies the timeout (in milliseconds) for network operations when downloading the Gradle distribution.</li> <li><code>validateDistributionUrl</code>: Specifies whether to validate the distribution URL when downloading the Gradle distribution.</li> <li><code>zipStoreBase</code>: Specifies the base directory for storing the downloaded Gradle distribution as a zip file.</li> <li><code>zipStorePath</code>: Specifies the path within the base directory where the downloaded Gradle distribution zip file is stored.</li> </ul> <p>The <code>gradle-wrapper.properties</code> file plays a crucial role in defining the behavior of the Gradle wrapper, allowing for customization of the Gradle distribution and network-related settings. It is an essential component in automating and standardizing the build process within a software project.</p>"},{"location":"integration-tests/overview/","title":"Integration Tests","text":"<p>The integration tests featured on this page have been specifically generated for your application, meticulously tailored to validate the seamless integration of its various components and modules. Here, you'll find a curated collection of tests designed to assess the interoperability of your software stack, ensuring reliability and cohesion across the system.</p> <p>Explore integration tests of your application.</p>"},{"location":"integration-tests/overview/#running-tests","title":"Running Tests","text":"<p>To run all tests in this project, you'll first need to install the necessary dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>Once the dependencies are installed, you can run the tests with the following command:</p> <pre><code>pytest\n</code></pre> <p>This command will automatically discover and run all test files in the current directory and its subdirectories.</p> <p>The <code>pytest.ini</code> file in the project root directory contains configuration for pytest, including settings for the ReportPortal integration. Make sure to fill in the <code>rp_api_key</code> field with your ReportPortal API key.</p>"},{"location":"openapi/overview/","title":"OpenAPI","text":"<p>Here, you'll discover a collection of OpenAPI specifications generated by our Gen-AI pipelines, which intelligently analyze your codebase to uncover relevant specs. These meticulously crafted specifications are tailored to optimize API development, ensuring compatibility and consistency across your projects. Explore this resource to streamline your API documentation and accelerate your development workflow with precision-generated specs.</p>"},{"location":"openapi/overview/#owner-controller-openapi","title":"owner-controller-openapi","text":""},{"location":"openapi/overview/#pet-controller-openapi","title":"pet-controller-openapi","text":""},{"location":"openapi/overview/#vet-controller-openapi","title":"vet-controller-openapi","text":""},{"location":"openapi/overview/#visit-controller-openapi","title":"visit-controller-openapi","text":""},{"location":"src/checkstyle/nohttp-checkstyle-suppressions.xml/","title":"nohttp-checkstyle-suppressions.xml","text":""},{"location":"src/checkstyle/nohttp-checkstyle-suppressions.xml/#overview","title":"Overview","text":"<p>The 'nohttp-checkstyle-suppressions.xml' file is an XML configuration file that contains suppressions for the Checkstyle tool. It is used to suppress specific Checkstyle checks for certain files or patterns within a software project.</p>"},{"location":"src/checkstyle/nohttp-checkstyle-suppressions.xml/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Suppressions</li> <li>Useful details</li> </ol>"},{"location":"src/checkstyle/nohttp-checkstyle-suppressions.xml/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/checkstyle/nohttp-checkstyle-suppressions.xml/#usage","title":"Usage","text":"<p>To use the 'nohttp-checkstyle-suppressions.xml' file in a project, it should be placed in the project directory where the Checkstyle tool is configured to look for suppression files. The Checkstyle tool will then read the suppressions specified in this file and apply them during the code analysis process.</p>"},{"location":"src/checkstyle/nohttp-checkstyle-suppressions.xml/#suppressions","title":"Suppressions","text":"<p>The file contains specific suppressions for Checkstyle checks based on file patterns. The 'suppress' elements within the 'suppressions' tag specify the files or patterns to be suppressed and the corresponding checks to be applied.</p> <p>For example: - <code>&lt;suppress files=\"node_modules/.*\" checks=\".*\"/&gt;</code> suppresses all checks for files within the 'node_modules' directory. - <code>&lt;suppress files=\".+\\.(jar|git|ico|p12|gif|jks|jpg|svg|log)\" checks=\"NoHttp\"/&gt;</code> suppresses the 'NoHttp' check for files with certain extensions.</p>"},{"location":"src/checkstyle/nohttp-checkstyle-suppressions.xml/#useful-details","title":"Useful details","text":"<ul> <li>The file follows the XML format and is compatible with the Checkstyle tool.</li> <li>The specified DTD (Document Type Definition) for the suppressions is 'https://checkstyle.org/dtds/suppressions_1_2.dtd'.</li> <li>The suppressions are used to customize the behavior of the Checkstyle tool and improve the accuracy of code analysis within the software project.</li> </ul>"},{"location":"src/checkstyle/nohttp-checkstyle.xml/","title":"nohttp-checkstyle.xml","text":""},{"location":"src/checkstyle/nohttp-checkstyle.xml/#overview","title":"Overview","text":"<p>The 'nohttp-checkstyle.xml' file is an XML configuration file used for the Checkstyle tool in a software project. It specifies the rules and checks to be performed by the Checkstyle tool, particularly related to identifying and prohibiting the use of HTTP in the codebase.</p>"},{"location":"src/checkstyle/nohttp-checkstyle.xml/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/checkstyle/nohttp-checkstyle.xml/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file, as it is a configuration file for the Checkstyle tool.</p>"},{"location":"src/checkstyle/nohttp-checkstyle.xml/#usage","title":"Usage","text":"<p>To use the 'nohttp-checkstyle.xml' file in a project, it needs to be referenced in the project's Checkstyle configuration. The Checkstyle tool will then apply the rules and checks specified in this file to the codebase during the build process.</p>"},{"location":"src/checkstyle/nohttp-checkstyle.xml/#methods","title":"Methods","text":"<p>The file does not contain specific methods or functions to be called. It primarily serves as a configuration file for the Checkstyle tool, specifying the 'NoHttpCheck' module to be used for identifying and prohibiting the use of HTTP in the code.</p>"},{"location":"src/checkstyle/nohttp-checkstyle.xml/#useful-details","title":"Useful details","text":"<ul> <li>The file specifies the Checkstyle tool version 1.2 using the DTD (Document Type Definition) provided by Puppy Crawl.</li> <li>It includes the 'NoHttpCheck' module from the 'io.spring.nohttp.checkstyle.check' package, indicating that it is specifically designed to check for HTTP-related issues in the codebase.</li> <li>The file is in XML format and follows the specified DTD for Checkstyle configuration.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java/","title":"PetClinicApplication.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java/#overview","title":"Overview","text":"<p>The 'PetClinicApplication.java' file is a Java class that serves as the entry point for the PetClinic Spring Boot Application. It is responsible for initializing and running the application using the SpringApplication class from the Spring Boot framework.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java development kit (JDK) version 8 or higher</li> <li>Spring Boot framework</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java/#usage","title":"Usage","text":"<p>To use the 'PetClinicApplication' class in a project, follow these steps: 1. Ensure that the prerequisites are met. 2. Create an instance of the class or call the 'main' method to start the PetClinic Spring Boot Application.</p> <p>Example: <pre><code>public class ApplicationRunner {\n    public static void main(String[] args) {\n        PetClinicApplication.main(args);\n    }\n}\n</code></pre></p>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java/#methods","title":"Methods","text":"<p>The 'PetClinicApplication' class does not contain any additional methods apart from the 'main' method. The 'main' method is used to start the Spring Boot application by calling the 'run' method of the SpringApplication class.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicApplication.java/#useful-details","title":"Useful details","text":"<ul> <li>The class is annotated with '@SpringBootApplication', indicating that it is the primary Spring Boot application class.</li> <li>It also includes the '@ImportRuntimeHints' annotation with 'PetClinicRuntimeHints.class' as a parameter, which may provide additional runtime hints to the application.</li> <li>The 'PetClinicApplication' class does not specify any specific dependencies or frameworks other than those provided by the Spring Boot framework.</li> <li>The code also includes a copyright notice and license information at the beginning of the file.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java/","title":"PetClinicRuntimeHints.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java/#overview","title":"Overview","text":"<p>The <code>PetClinicRuntimeHints</code> class is used to register runtime hints for the PetClinic application. It implements the <code>RuntimeHintsRegistrar</code> interface, which allows it to provide hints for the Ahead of Time (AOT) compilation process. These hints are used to optimize the application's runtime behavior and performance.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java/#usage","title":"Usage","text":"<p>To use the <code>PetClinicRuntimeHints</code> class in a project, you need to instantiate it and call the <code>registerHints</code> method, passing the <code>RuntimeHints</code> and <code>ClassLoader</code> as parameters.</p> <p>Example: <pre><code>PetClinicRuntimeHints runtimeHints = new PetClinicRuntimeHints();\nruntimeHints.registerHints(hints, classLoader);\n</code></pre></p>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java/#methods","title":"Methods","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java/#registerhints","title":"<code>registerHints</code>","text":"<p><pre><code>public void registerHints(RuntimeHints hints, ClassLoader classLoader)\n</code></pre> - Registers runtime hints for the application. - Parameters:   - <code>hints</code>: The <code>RuntimeHints</code> object used to register hints.   - <code>classLoader</code>: The <code>ClassLoader</code> used to load classes at runtime.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/PetClinicRuntimeHints.java/#useful-details","title":"Useful details","text":"<ul> <li>This class is used to provide AOT compilation hints for the PetClinic application.</li> <li>It registers patterns for resource loading and serialization types to optimize runtime behavior.</li> <li>The hints provided by this class can improve the performance and efficiency of the PetClinic application.</li> <li>It is part of the Spring Framework and is used in conjunction with AOT compilation processes.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java/","title":"BaseEntity.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java/#overview","title":"Overview","text":"<p>The BaseEntity.java file is a Java class that serves as a base class for other domain objects in a software project. It contains an id property and methods for getting and setting the id, as well as a method for checking if the object is new.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java/#usage","title":"Usage","text":"<p>To utilize the BaseEntity class in a project, it can be extended by other domain objects that require an id property. It provides a foundation for defining common properties and methods that are needed across multiple domain objects.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java/#methods","title":"Methods","text":"<ul> <li><code>getId()</code>: Returns the id of the BaseEntity object.</li> <li>Parameters: None</li> <li>Returns: Integer - the id of the BaseEntity object</li> <li><code>setId(Integer id)</code>: Sets the id of the BaseEntity object.</li> <li>Parameters: Integer id - the id to be set</li> <li>Returns: void</li> <li><code>isNew()</code>: Checks if the BaseEntity object is new.</li> <li>Parameters: None</li> <li>Returns: boolean - true if the object is new (id is null), false otherwise</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/BaseEntity.java/#useful-details","title":"Useful details","text":"<ul> <li>Version: 1.0</li> <li>Framework: Spring Framework</li> <li>Dependencies: None</li> <li>Additional details: This BaseEntity class is designed to be used as a base class for domain objects that require an id property. It provides basic functionality for managing the id property and checking if an object is new.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/","title":"NamedEntity.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#overview","title":"Overview","text":"<p>NamedEntity.java is a Java class that serves as a base class for domain objects needing a name property. It extends the BaseEntity class and adds a simple name property. This class is intended to be used as a base class for other objects that require a name attribute.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#prerequisites","title":"Prerequisites","text":"<p>No specific dependencies or prerequisites are required to use NamedEntity.java.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#usage","title":"Usage","text":"<p>To use NamedEntity.java in a project, you can create a new class that extends NamedEntity and make use of the name property. Here is an example of how to instantiate and utilize NamedEntity in a project:</p> <pre><code>public class CustomEntity extends NamedEntity {\n    // Custom properties and methods\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        CustomEntity entity = new CustomEntity();\n        entity.setName(\"Custom Name\");\n        System.out.println(entity.getName());\n    }\n}\n</code></pre>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#methods","title":"Methods","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#getname","title":"getName()","text":"<ul> <li>Returns the name of the NamedEntity object.</li> <li>Parameters: None</li> <li>Return: String - the name of the NamedEntity object.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#setnamestring-name","title":"setName(String name)","text":"<ul> <li>Sets the name of the NamedEntity object.</li> <li>Parameters: </li> <li>name: String - the name to be set for the NamedEntity object.</li> <li>Return: void</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#tostring","title":"toString()","text":"<ul> <li>Overrides the toString() method to return the name of the NamedEntity object.</li> <li>Parameters: None</li> <li>Return: String - the name of the NamedEntity object.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/NamedEntity.java/#useful-details","title":"Useful details","text":"<ul> <li>Framework: This class is part of the Spring PetClinic project.</li> <li>Dependencies: This class depends on the BaseEntity class.</li> <li>Version: Copyright notice indicates the code is from 2012-2019.</li> <li>Licensing: Licensed under the Apache License, Version 2.0.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/","title":"Person.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#overview","title":"Overview","text":"<p>The <code>Person.java</code> file is a Java class that represents a simple JavaBean domain object representing a person. It contains the basic properties and methods to manipulate the data related to a person, such as their first name and last name. This class plays a role in modeling and managing person-related data within a software project.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the <code>Person.java</code> file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#usage","title":"Usage","text":"<p>To use the <code>Person</code> class in a project, you can instantiate it and utilize its methods to set and retrieve the first name and last name of a person. Here's an example of how to use it:</p> <pre><code>// Instantiate a new Person object\nPerson person = new Person();\n\n// Set the first and last name\nperson.setFirstName(\"John\");\nperson.setLastName(\"Doe\");\n\n// Get the first and last name\nString firstName = person.getFirstName();\nString lastName = person.getLastName();\n</code></pre>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#methods","title":"Methods","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#getfirstname","title":"<code>getFirstName()</code>","text":"<ul> <li>Description: Retrieves the first name of the person.</li> <li>Parameters: None</li> <li>Return Value: String representing the first name.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#setfirstnamestring-firstname","title":"<code>setFirstName(String firstName)</code>","text":"<ul> <li>Description: Sets the first name of the person.</li> <li>Parameters:</li> <li><code>firstName</code> (String): The first name to be set.</li> <li>Return Value: None</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#getlastname","title":"<code>getLastName()</code>","text":"<ul> <li>Description: Retrieves the last name of the person.</li> <li>Parameters: None</li> <li>Return Value: String representing the last name.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#setlastnamestring-lastname","title":"<code>setLastName(String lastName)</code>","text":"<ul> <li>Description: Sets the last name of the person.</li> <li>Parameters:</li> <li><code>lastName</code> (String): The last name to be set.</li> <li>Return Value: None</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/Person.java/#useful-details","title":"Useful details","text":"<ul> <li>Framework: This file is part of the <code>org.springframework.samples.petclinic.model</code> package.</li> <li>Dependencies: This file depends on the <code>BaseEntity</code> class, which is not included in the provided code snippet.</li> <li>Author: The <code>Person</code> class was originally authored by Ken Krebs.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/package-info.java/","title":"package-info.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/model/package-info.java/#overview","title":"Overview","text":"<p>The <code>package-info.java</code> file provides information about the package <code>org.springframework.samples.petclinic.model</code> and its utilities used by the domain in the Spring PetClinic project.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/package-info.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/package-info.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites for using this file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/package-info.java/#usage","title":"Usage","text":"<p>The <code>package-info.java</code> file does not contain any specific code or methods, but it provides information about the package and its utilities. It is used to document the purpose and functionality of the classes in the <code>org.springframework.samples.petclinic.model</code> package.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/package-info.java/#methods","title":"Methods","text":"<p>There are no specific methods in the <code>package-info.java</code> file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/model/package-info.java/#useful-details","title":"Useful details","text":"<ul> <li>This file is licensed under the Apache License, Version 2.0.</li> <li>It contains the URL to obtain a copy of the license.</li> <li>It provides information about the utilities used by the domain in the Spring PetClinic project.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/","title":"Owner.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#overview","title":"Overview","text":"<p><code>Owner.java</code> is a Java class that represents an owner in a pet clinic management system. It is a domain object that extends the <code>Person</code> class and contains information about the owner's address, city, telephone number, and the pets they own. The class provides methods to manipulate and access this information, such as adding a pet, retrieving a pet by name or ID, and adding a visit for a pet.</p> <p>This class is an essential component of the pet clinic management system as it encapsulates the data and behavior of an owner. It allows the system to store and retrieve information about owners and their pets, facilitating various operations in the larger project, such as creating appointments, managing medical records, and generating reports.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites for using <code>Owner.java</code>. However, it is assumed that the project is using Java and a compatible development environment.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#usage","title":"Usage","text":"<p>To use <code>Owner.java</code> in a project, follow these steps:</p> <ol> <li> <p>Import the necessary classes and packages: <pre><code>import org.springframework.samples.petclinic.owner.Owner;\nimport org.springframework.samples.petclinic.owner.Pet;\nimport org.springframework.samples.petclinic.owner.Visit;\n</code></pre></p> </li> <li> <p>Create an instance of the <code>Owner</code> class: <pre><code>Owner owner = new Owner();\n</code></pre></p> </li> <li> <p>Set the owner's information such as address, city, and telephone number: <pre><code>owner.setAddress(\"123 Main St\");\nowner.setCity(\"New York\");\nowner.setTelephone(\"555-1234\");\n</code></pre></p> </li> <li> <p>Add pets to the owner's list of pets: <pre><code>Pet pet1 = new Pet();\npet1.setName(\"Max\");\nowner.addPet(pet1);\n\nPet pet2 = new Pet();\npet2.setName(\"Bella\");\nowner.addPet(pet2);\n</code></pre></p> </li> <li> <p>Perform operations on the owner's pets, such as adding a visit: <pre><code>Visit visit = new Visit();\n// Set visit details\n\nowner.addVisit(pet1.getId(), visit);\n</code></pre></p> </li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#methods","title":"Methods","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#getaddress","title":"<code>getAddress()</code>","text":"<p><pre><code>public String getAddress()\n</code></pre> Returns the address of the owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#setaddressstring-address","title":"<code>setAddress(String address)</code>","text":"<p><pre><code>public void setAddress(String address)\n</code></pre> Sets the address of the owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#getcity","title":"<code>getCity()</code>","text":"<p><pre><code>public String getCity()\n</code></pre> Returns the city of the owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#setcitystring-city","title":"<code>setCity(String city)</code>","text":"<p><pre><code>public void setCity(String city)\n</code></pre> Sets the city of the owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#gettelephone","title":"<code>getTelephone()</code>","text":"<p><pre><code>public String getTelephone()\n</code></pre> Returns the telephone number of the owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#settelephonestring-telephone","title":"<code>setTelephone(String telephone)</code>","text":"<p><pre><code>public void setTelephone(String telephone)\n</code></pre> Sets the telephone number of the owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#getpets","title":"<code>getPets()</code>","text":"<p><pre><code>public List&lt;Pet&gt; getPets()\n</code></pre> Returns a list of pets owned by the owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#addpetpet-pet","title":"<code>addPet(Pet pet)</code>","text":"<p><pre><code>public void addPet(Pet pet)\n</code></pre> Adds a pet to the owner's list of pets.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#getpetstring-name","title":"<code>getPet(String name)</code>","text":"<p><pre><code>public Pet getPet(String name)\n</code></pre> Returns the pet with the given name, or null if none is found for this owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#getpetinteger-id","title":"<code>getPet(Integer id)</code>","text":"<p><pre><code>public Pet getPet(Integer id)\n</code></pre> Returns the pet with the given ID, or null if none is found for this owner.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#getpetstring-name-boolean-ignorenew","title":"<code>getPet(String name, boolean ignoreNew)</code>","text":"<p><pre><code>public Pet getPet(String name, boolean ignoreNew)\n</code></pre> Returns the pet with the given name, ignoring new pets if specified.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#tostring","title":"<code>toString()</code>","text":"<p><pre><code>@Override\npublic String toString()\n</code></pre> Returns a string representation of the owner, including their ID, last name, first name, address, city, and telephone number.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#addvisitinteger-petid-visit-visit","title":"<code>addVisit(Integer petId, Visit visit)</code>","text":"<p><pre><code>public void addVisit(Integer petId, Visit visit)\n</code></pre> Adds the given visit to the pet with the given ID.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Owner.java/#useful-details","title":"Useful details","text":"<ul> <li>This class is part of the <code>org.springframework.samples.petclinic.owner</code> package.</li> <li>It extends the <code>Person</code> class, which is likely to be another domain object representing a person.</li> <li>The class uses annotations from the <code>jakarta.persistence</code> package for mapping to a database table.</li> <li>It also uses annotations from the <code>jakarta.validation.constraints</code> package for validating input fields.</li> <li>The class depends on the <code>Pet</code> and <code>Visit</code> classes, which are likely to be other domain objects in the pet clinic management system.</li> <li>The class includes several utility methods for managing pets and visits, such as retrieving pets by name or ID and adding visits to pets.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java/","title":"OwnerController.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java/#overview","title":"Overview","text":"<p>This file contains the implementation of the <code>OwnerController</code> class, which is a controller responsible for handling requests related to owners in a pet clinic application. It provides methods for creating, updating, finding, and displaying owners. The <code>OwnerController</code> class interacts with the <code>OwnerRepository</code> to perform CRUD operations on owner data.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java/#prerequisites","title":"Prerequisites","text":"<p>No specific prerequisites are mentioned in the file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java/#usage","title":"Usage","text":"<p>To use the <code>OwnerController</code> class, follow these steps: 1. Instantiate the class and provide an instance of the <code>OwnerRepository</code> in the constructor. 2. Use the provided methods to handle owner-related requests:    - <code>initCreationForm()</code>: Initializes the creation form for a new owner.    - <code>processCreationForm()</code>: Processes the form submission for creating a new owner.    - <code>initFindForm()</code>: Initializes the form for finding owners.    - <code>processFindForm()</code>: Processes the form submission for finding owners.    - <code>initUpdateOwnerForm()</code>: Initializes the update form for an existing owner.    - <code>processUpdateOwnerForm()</code>: Processes the form submission for updating an existing owner.    - <code>showOwner()</code>: Displays the details of an owner. 3. Customize the behavior of the <code>OwnerController</code> by modifying the implementation of the provided methods or adding new methods as needed.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java/#methods","title":"Methods","text":"<ul> <li><code>setAllowedFields(WebDataBinder dataBinder)</code>: Sets the fields that are not allowed to be bound during data binding. In this case, the \"id\" field is disallowed.</li> <li><code>findOwner(Integer ownerId)</code>: Returns an instance of the <code>Owner</code> class based on the provided owner ID. If no owner ID is provided, a new instance of <code>Owner</code> is returned.</li> <li><code>initCreationForm(Map&lt;String, Object&gt; model)</code>: Initializes the creation form for a new owner by adding a new instance of <code>Owner</code> to the model.</li> <li><code>processCreationForm(Owner owner, BindingResult result, RedirectAttributes redirectAttributes)</code>: Processes the form submission for creating a new owner. If there are validation errors, an error message is added to the redirect attributes and the user is redirected back to the creation form. Otherwise, the owner is saved and a success message is added to the redirect attributes.</li> <li><code>initFindForm()</code>: Initializes the form for finding owners.</li> <li><code>processFindForm(int page, Owner owner, BindingResult result, Model model)</code>: Processes the form submission for finding owners. If no last name is provided, all owners are returned. If owners are found, they are added to the model for display. If only one owner is found, the user is redirected to the details page of that owner. If multiple owners are found, pagination information is added to the model along with the list of owners.</li> <li><code>addPaginationModel(int page, Model model, Page&lt;Owner&gt; paginated)</code>: Adds pagination information and the list of owners to the model for display.</li> <li><code>findPaginatedForOwnersLastName(int page, String lastname)</code>: Finds owners with the provided last name using pagination. The page number and page size are specified, and a <code>Pageable</code> object is used to perform the query.</li> <li><code>initUpdateOwnerForm(int ownerId, Model model)</code>: Initializes the update form for an existing owner by adding the owner to the model.</li> <li><code>processUpdateOwnerForm(Owner owner, BindingResult result, int ownerId, RedirectAttributes redirectAttributes)</code>: Processes the form submission for updating an existing owner. If there are validation errors, an error message is added to the redirect attributes and the user is redirected back to the update form. Otherwise, the owner is updated and a success message is added to the redirect attributes.</li> <li><code>showOwner(int ownerId)</code>: Displays the details of an owner. The owner is retrieved based on the provided owner ID, and the owner object is added to the model for display.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerController.java/#useful-details","title":"Useful details","text":"<ul> <li>Frameworks and dependencies mentioned in the file: Spring Framework</li> <li>No additional details are mentioned in the file.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java/","title":"OwnerRepository.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java/#overview","title":"Overview","text":"<p>This Java interface acts as a repository for the <code>Owner</code> domain objects. It provides methods for retrieving, saving, and querying owner data from the data store. It follows Spring Data naming conventions and can easily be extended for Spring Data.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>This file has dependencies on Spring Data and Spring Framework.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java/#usage","title":"Usage","text":"<p>To use this repository in a project, you can create an instance of it and use its methods to interact with the owner data in the data store.</p> <pre><code>OwnerRepository ownerRepository = new OwnerRepository();\n// Example usage: Find owners by last name\nPage&lt;Owner&gt; ownersByLastName = ownerRepository.findByLastName(\"Smith\", PageRequest.of(0, 10));\n</code></pre>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java/#methods","title":"Methods","text":"<ol> <li><code>findPetTypes()</code>: Retrieve all pet types from the data store.</li> <li> <p>Returns: a Collection of <code>PetType</code>s.</p> </li> <li> <p><code>findByLastName(String lastName, Pageable pageable)</code>: Retrieve owners from the data store by last name.</p> </li> <li>Parameters:<ul> <li><code>lastName</code>: Value to search for.</li> <li><code>pageable</code>: Pageable object for pagination.</li> </ul> </li> <li> <p>Returns: a Collection of matching <code>Owner</code>s.</p> </li> <li> <p><code>findById(Integer id)</code>: Retrieve an <code>Owner</code> from the data store by id.</p> </li> <li>Parameters:<ul> <li><code>id</code>: The id to search for.</li> </ul> </li> <li> <p>Returns: the <code>Owner</code> if found.</p> </li> <li> <p><code>save(Owner owner)</code>: Save an <code>Owner</code> to the data store, either inserting or updating it.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>owner</code>: The <code>Owner</code> to save.</li> </ul> </li> <li> <p><code>findAll(Pageable pageable)</code>: Returns all the owners from the data store.</p> </li> <li>Parameters:<ul> <li><code>pageable</code>: Pageable object for pagination.</li> </ul> </li> <li>Returns: a Collection of all <code>Owner</code>s.</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/OwnerRepository.java/#useful-details","title":"Useful details","text":"<ul> <li>This file is compliant with Spring Data naming conventions.</li> <li>It depends on Spring Data JPA and Spring Framework.</li> <li>It provides methods for querying and saving owner data in the data store.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Pet.java/","title":"Pet.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Pet.java/#overview","title":"Overview","text":"<p>The <code>Pet.java</code> file contains the code for a simple business object representing a pet. It includes properties for the pet's birth date, type, and a collection of visits. The class plays a crucial role in the Pet Clinic software project as it represents the core entity of the system - a pet.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Pet.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Pet.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Pet.java/#usage","title":"Usage","text":"<p>To utilize the <code>Pet</code> class in a project, follow these steps: 1. Import the <code>Pet.java</code> file into the project. 2. Instantiate a new <code>Pet</code> object and set its properties as needed. 3. Utilize the various methods available for setting and getting the pet's birth date, type, and visits.</p> <p>Example: <pre><code>Pet myPet = new Pet();\nmyPet.setBirthDate(LocalDate.of(2015, 5, 15));\nmyPet.setType(petType);\nmyPet.addVisit(visit);\n</code></pre></p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Pet.java/#methods","title":"Methods","text":"<p>The <code>Pet.java</code> file contains the following methods: - <code>setBirthDate(LocalDate birthDate)</code>: Sets the birth date of the pet. - <code>getBirthDate()</code>: Retrieves the birth date of the pet. - <code>getType()</code>: Retrieves the type of the pet. - <code>setType(PetType type)</code>: Sets the type of the pet. - <code>getVisits()</code>: Retrieves the collection of visits for the pet. - <code>addVisit(Visit visit)</code>: Adds a visit to the collection of visits for the pet.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Pet.java/#useful-details","title":"Useful details","text":"<ul> <li>The file uses the <code>LocalDate</code> class for representing birth date.</li> <li>It utilizes the <code>PetType</code> and <code>Visit</code> classes, which are assumed to be defined elsewhere in the project.</li> <li>The class is annotated with various <code>jakarta.persistence</code> annotations for defining the entity, table, and relationships with other entities.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetController.java/","title":"PetController.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetController.java/#overview","title":"Overview","text":"<p><code>PetController.java</code> is a Java class that serves as a controller for managing pet-related operations in a software project. It is part of the Spring PetClinic project and is responsible for handling requests related to pets, such as creating, updating, and retrieving pet information. This class interacts with the <code>OwnerRepository</code> to access and update pet data.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetController.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetController.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites mentioned in the code. However, it can be assumed that the project requires the following dependencies: - Spring Framework (version not specified) - Spring Boot (version not specified) - Spring MVC (version not specified)</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetController.java/#usage","title":"Usage","text":"<p>To use the <code>PetController</code> class in a project, follow these steps: 1. Make sure that the necessary dependencies and frameworks are set up in the project. 2. Include the <code>PetController.java</code> file in the project's source code. 3. Instantiate the <code>PetController</code> class, providing an instance of the <code>OwnerRepository</code> class as a constructor argument. 4. Use the various methods and annotations provided by the <code>PetController</code> class to handle pet-related requests.</p> <p>Example usage: <pre><code>OwnerRepository ownerRepository = new OwnerRepository(); // Instantiate OwnerRepository (example)\nPetController petController = new PetController(ownerRepository); // Instantiate PetController\n// Use petController to handle pet-related requests\n</code></pre></p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetController.java/#methods","title":"Methods","text":"<p>The <code>PetController</code> class provides the following methods:</p> <ol> <li><code>populatePetTypes()</code></li> <li>Description: Retrieves a collection of available pet types.</li> <li>Parameters: None</li> <li>Return value: <code>Collection&lt;PetType&gt;</code> - a collection of pet types.</li> <li> <p>Example usage:      <pre><code>Collection&lt;PetType&gt; petTypes = petController.populatePetTypes();\n</code></pre></p> </li> <li> <p><code>findOwner(int ownerId)</code></p> </li> <li>Description: Retrieves the owner with the specified ID.</li> <li>Parameters:<ul> <li><code>ownerId</code> (int) - the ID of the owner to retrieve.</li> </ul> </li> <li>Return value: <code>Owner</code> - the owner object with the specified ID.</li> <li> <p>Example usage:      <pre><code>Owner owner = petController.findOwner(1);\n</code></pre></p> </li> <li> <p><code>findPet(int ownerId, Integer petId)</code></p> </li> <li>Description: Retrieves the pet with the specified ID for the given owner.</li> <li>Parameters:<ul> <li><code>ownerId</code> (int) - the ID of the owner.</li> <li><code>petId</code> (Integer) - the ID of the pet to retrieve (optional).</li> </ul> </li> <li>Return value: <code>Pet</code> - the pet object with the specified ID, or a new pet object if <code>petId</code> is null.</li> <li> <p>Example usage:      <pre><code>Pet pet = petController.findPet(1, 2);\n</code></pre></p> </li> <li> <p><code>initOwnerBinder(WebDataBinder dataBinder)</code></p> </li> <li>Description: Sets up data binding for the owner object.</li> <li>Parameters:<ul> <li><code>dataBinder</code> (WebDataBinder) - the data binder to configure.</li> </ul> </li> <li>Return value: void</li> <li> <p>Example usage:      <pre><code>WebDataBinder dataBinder = new WebDataBinder(); // Instantiate WebDataBinder (example)\npetController.initOwnerBinder(dataBinder);\n</code></pre></p> </li> <li> <p><code>initPetBinder(WebDataBinder dataBinder)</code></p> </li> <li>Description: Sets up data binding for the pet object.</li> <li>Parameters:<ul> <li><code>dataBinder</code> (WebDataBinder) - the data binder to configure.</li> </ul> </li> <li>Return value: void</li> <li> <p>Example usage:      <pre><code>WebDataBinder dataBinder = new WebDataBinder(); // Instantiate WebDataBinder (example)\npetController.initPetBinder(dataBinder);\n</code></pre></p> </li> <li> <p><code>initCreationForm(Owner owner, ModelMap model)</code></p> </li> <li>Description: Initializes the pet creation form.</li> <li>Parameters:<ul> <li><code>owner</code> (Owner) - the owner object.</li> <li><code>model</code> (ModelMap) - the model map to add attributes to.</li> </ul> </li> <li>Return value: <code>String</code> - the view name for the pet creation form.</li> <li> <p>Example usage:      <pre><code>Owner owner = new Owner(); // Instantiate Owner (example)\nModelMap model = new ModelMap(); // Instantiate ModelMap (example)\nString viewName = petController.initCreationForm(owner, model);\n</code></pre></p> </li> <li> <p><code>processCreationForm(Owner owner, Pet pet, BindingResult result, ModelMap model, RedirectAttributes redirectAttributes)</code></p> </li> <li>Description: Processes the pet creation form submission.</li> <li>Parameters:<ul> <li><code>owner</code> (Owner) - the owner object.</li> <li><code>pet</code> (Pet) - the pet object to create.</li> <li><code>result</code> (BindingResult) - the binding result object.</li> <li><code>model</code> (ModelMap) - the model map to add attributes to.</li> <li><code>redirectAttributes</code> (RedirectAttributes) - the redirect attributes object.</li> </ul> </li> <li>Return value: <code>String</code> - the view name or redirect URL after processing the form submission.</li> <li> <p>Example usage:      <pre><code>Owner owner = new Owner(); // Instantiate Owner (example)\nPet pet = new Pet(); // Instantiate Pet (example)\nBindingResult result = new BindingResult(); // Instantiate BindingResult (example)\nModelMap model = new ModelMap(); // Instantiate ModelMap (example)\nRedirectAttributes redirectAttributes = new RedirectAttributes(); // Instantiate RedirectAttributes (example)\nString viewName = petController.processCreationForm(owner, pet, result, model, redirectAttributes);\n</code></pre></p> </li> <li> <p><code>initUpdateForm(Owner owner, int petId, ModelMap model, RedirectAttributes redirectAttributes)</code></p> </li> <li>Description: Initializes the pet update form.</li> <li>Parameters:<ul> <li><code>owner</code> (Owner) - the owner object.</li> <li><code>petId</code> (int) - the ID of the pet to update.</li> <li><code>model</code> (ModelMap) - the model map to add attributes to.</li> <li><code>redirectAttributes</code> (RedirectAttributes) - the redirect attributes object.</li> </ul> </li> <li>Return value: <code>String</code> - the view name for the pet update form.</li> <li> <p>Example usage:      <pre><code>Owner owner = new Owner(); // Instantiate Owner (example)\nint petId = 2;\nModelMap model = new ModelMap(); // Instantiate ModelMap (example)\nRedirectAttributes redirectAttributes = new RedirectAttributes(); // Instantiate RedirectAttributes (example)\nString viewName = petController.initUpdateForm(owner, petId, model, redirectAttributes);\n</code></pre></p> </li> <li> <p><code>processUpdateForm(Pet pet, BindingResult result, Owner owner, ModelMap model, RedirectAttributes redirectAttributes)</code></p> </li> <li>Description: Processes the pet update form submission.</li> <li>Parameters:<ul> <li><code>pet</code> (Pet) - the pet object to update.</li> <li><code>result</code> (BindingResult) - the binding result object.</li> <li><code>owner</code> (Owner) - the owner object.</li> <li><code>model</code> (ModelMap) - the model map to add attributes to.</li> <li><code>redirectAttributes</code> (RedirectAttributes) - the redirect attributes object.</li> </ul> </li> <li>Return value: <code>String</code> - the view name or redirect URL after processing the form submission.</li> <li>Example usage:      <pre><code>Pet pet = new Pet(); // Instantiate Pet (example)\nBindingResult result = new BindingResult(); // Instantiate BindingResult (example)\nOwner owner = new Owner(); // Instantiate Owner (example)\nModelMap model = new ModelMap(); // Instantiate ModelMap (example)\nRedirectAttributes redirectAttributes = new RedirectAttributes(); // Instantiate RedirectAttributes (example)\nString viewName = petController.processUpdateForm(pet, result, owner, model, redirectAttributes);\n</code></pre></li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetController.java/#useful-details","title":"Useful details","text":"<p>The <code>PetController.java</code> file does not provide any additional details about versions, frameworks, or dependencies used in the code.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetType.java/","title":"PetType.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetType.java/#overview","title":"Overview","text":"<p>The 'PetType.java' file is a Java class that represents the type of pet in a pet clinic application. It extends the 'NamedEntity' class and is used to define different types of pets such as Cat, Dog, Hamster, etc. This class plays a crucial role in the pet clinic software project by providing a structured way to manage and categorize different types of pets.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetType.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetType.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the 'PetType.java' file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetType.java/#usage","title":"Usage","text":"<p>To utilize the 'PetType' class in a project, you can instantiate it and use it to define different types of pets. Here's an example of how it can be used:</p> <pre><code>PetType cat = new PetType();\ncat.setName(\"Cat\");\n</code></pre>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetType.java/#methods","title":"Methods","text":"<p>The 'PetType.java' file does not contain any additional methods apart from the inherited methods from the 'NamedEntity' class.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetType.java/#useful-details","title":"Useful details","text":"<ul> <li>This file is part of the 'org.springframework.samples.petclinic.owner' package.</li> <li>It is licensed under the Apache License, Version 2.0.</li> <li>Uses annotations from the 'jakarta.persistence' package for entity and table mapping.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/","title":"PetTypeFormatter.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/#overview","title":"Overview","text":"<p>The <code>PetTypeFormatter</code> class is a component of the Spring PetClinic project and is responsible for instructing Spring MVC on how to parse and print elements of type 'PetType'. It utilizes the Formatter interface to provide parsing and printing functionality for PetType objects.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/#prerequisites","title":"Prerequisites","text":"<p>No specific dependencies or prerequisites are required to use this file other than having the Spring framework available.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/#usage","title":"Usage","text":"<p>To use the <code>PetTypeFormatter</code> class in a project, it can be instantiated and utilized in conjunction with Spring MVC to handle the parsing and printing of PetType objects.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/#methods","title":"Methods","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/#printpettype-pettype-locale-locale","title":"<code>print(PetType petType, Locale locale)</code>","text":"<p>Prints the string representation of the provided PetType object based on the specified locale.</p> <ul> <li><code>petType</code>: The PetType object to be printed.</li> <li><code>locale</code>: The locale for which the PetType should be printed.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/#parsestring-text-locale-locale","title":"<code>parse(String text, Locale locale)</code>","text":"<p>Parses the input string to find the corresponding PetType object based on the specified locale.</p> <ul> <li><code>text</code>: The input string representing the PetType.</li> <li><code>locale</code>: The locale in which the input string should be parsed.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetTypeFormatter.java/#useful-details","title":"Useful details","text":"<ul> <li>Version: 2012-2019</li> <li>Framework: Spring</li> <li>Dependencies: OwnerRepository</li> </ul> <p>The class provides functionality for parsing and printing PetType objects within the Spring PetClinic project. It implements the Formatter interface and utilizes an Autowired OwnerRepository to retrieve and manipulate PetType objects. The class is also annotated as a Spring Component, indicating its role within the Spring application context.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/","title":"PetValidator.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/#overview","title":"Overview","text":"<p>The <code>PetValidator</code> Java class is a validation component used in the Spring PetClinic project to validate <code>Pet</code> forms. It implements the <code>Validator</code> interface to provide custom validation rules for <code>Pet</code> objects.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the <code>PetValidator</code> class.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/#usage","title":"Usage","text":"<p>To use the <code>PetValidator</code> in a project, you can instantiate an instance of the class and utilize it to validate <code>Pet</code> objects in the application.</p> <pre><code>PetValidator petValidator = new PetValidator();\npetValidator.validate(pet, errors);\n</code></pre>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/#methods","title":"Methods","text":"<p>The <code>PetValidator</code> class contains the following methods:</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/#validate","title":"validate","text":"<p><pre><code>void validate(Object obj, Errors errors)\n</code></pre> This method is used to validate a <code>Pet</code> object and populate any validation errors in the provided <code>Errors</code> object. It checks for the presence of a name, type, and birth date for the pet.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/#supports","title":"supports","text":"<p><pre><code>boolean supports(Class&lt;?&gt; clazz)\n</code></pre> This method determines if the <code>PetValidator</code> supports the validation of a specific class. In this case, it checks if the provided class is assignable from the <code>Pet</code> class.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/PetValidator.java/#useful-details","title":"Useful details","text":"<ul> <li>The <code>PetValidator</code> class does not have any additional dependencies or specific framework requirements.</li> <li>It provides custom validation rules for <code>Pet</code> objects, allowing for more flexible and specific validation compared to Bean Validation annotations.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/","title":"Visit.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#overview","title":"Overview","text":"<p>The Visit.java file contains the code for a JavaBean domain object representing a visit in the context of a pet clinic application. It includes attributes to store the visit date and description, as well as methods to retrieve and set these attributes.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#prerequisites","title":"Prerequisites","text":"<p>No specific dependencies or prerequisites are required to use this file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#usage","title":"Usage","text":"<p>To utilize the Visit class in a project, you can instantiate objects of this class to represent visits in a pet clinic. An example of instantiation and usage is as follows: <pre><code>Visit visit = new Visit();\nvisit.setDate(LocalDate.now());\nvisit.setDescription(\"Routine checkup\");\n</code></pre></p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#methods","title":"Methods","text":"<p>The Visit class contains the following methods:</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#public-localdate-getdate","title":"<code>public LocalDate getDate()</code>","text":"<ul> <li>Returns the date of the visit.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#public-void-setdatelocaldate-date","title":"<code>public void setDate(LocalDate date)</code>","text":"<ul> <li>Sets the date of the visit.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#public-string-getdescription","title":"<code>public String getDescription()</code>","text":"<ul> <li>Returns the description of the visit.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#public-void-setdescriptionstring-description","title":"<code>public void setDescription(String description)</code>","text":"<ul> <li>Sets the description of the visit.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/Visit.java/#useful-details","title":"Useful details","text":"<ul> <li>The Visit class uses the <code>LocalDate</code> class from the <code>java.time</code> package to store visit dates.</li> <li>It includes annotations from the <code>org.springframework.format.annotation</code> and <code>jakarta.persistence</code> packages for date formatting and entity mapping.</li> <li>The Visit class extends the <code>BaseEntity</code> class, which is not shown in the provided code snippet.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/VisitController.java/","title":"VisitController.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/owner/VisitController.java/#overview","title":"Overview","text":"<p>The <code>VisitController.java</code> file is a Java class that serves as a controller for managing visits for pets in a pet clinic software project. It handles the initialization and processing of new visit forms, as well as loading pet information with visits.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/VisitController.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/VisitController.java/#prerequisites","title":"Prerequisites","text":"<p>This file has dependencies on the following frameworks and libraries: - Spring Framework - Jakarta Validation API</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/VisitController.java/#usage","title":"Usage","text":"<p>To utilize the <code>VisitController</code> in a project, the class needs to be instantiated and used as a controller for handling visit-related operations in the pet clinic application.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/VisitController.java/#methods","title":"Methods","text":"<ul> <li><code>setAllowedFields(WebDataBinder dataBinder)</code>: A method annotated with <code>@InitBinder</code> that sets disallowed fields for data binding.</li> <li><code>loadPetWithVisit(int ownerId, int petId, Map&lt;String, Object&gt; model)</code>: An <code>@ModelAttribute</code> method that loads pet information with visits before processing a new visit form.</li> <li><code>initNewVisitForm()</code>: Handles the initialization of a new visit form.</li> <li><code>processNewVisitForm(Owner owner, int petId, Visit visit, BindingResult result, RedirectAttributes redirectAttributes)</code>: Processes a new visit form and saves the visit details.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/owner/VisitController.java/#useful-details","title":"Useful details","text":"<ul> <li>The controller is annotated with <code>@Controller</code>.</li> <li>It has a dependency on <code>OwnerRepository</code> for managing owners and their pets.</li> <li>Uses Jakarta Validation API (<code>@Valid</code>) for input validation.</li> <li>Implements methods for handling GET and POST requests related to visit management.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java/","title":"CacheConfiguration.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java/#overview","title":"Overview","text":"<p>The <code>CacheConfiguration</code> file is a Java class that provides configuration for caches using the JCache API. It creates and configures the cache used for the application and enables statistics accessible via JMX. This class plays a crucial role in optimizing the caching mechanism of the software project.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites mentioned in the file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java/#usage","title":"Usage","text":"<p>To use the <code>CacheConfiguration</code> class in a project, it can be instantiated and utilized by adding the <code>@Configuration</code> and <code>@EnableCaching</code> annotations. Additionally, a <code>JCacheManagerCustomizer</code> bean can be created using the <code>petclinicCacheConfigurationCustomizer</code> method to customize the cache configuration.</p> <pre><code>@Configuration\n@EnableCaching\nclass CacheConfiguration {\n    @Bean\n    public JCacheManagerCustomizer petclinicCacheConfigurationCustomizer() {\n        return cm -&gt; cm.createCache(\"vets\", cacheConfiguration());\n    }\n\n    private javax.cache.configuration.Configuration&lt;Object, Object&gt; cacheConfiguration() {\n        return new MutableConfiguration&lt;&gt;().setStatisticsEnabled(true);\n    }\n}\n</code></pre>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java/#methods","title":"Methods","text":"<ul> <li><code>petclinicCacheConfigurationCustomizer()</code>: A method that creates a <code>JCacheManagerCustomizer</code> bean for customizing the cache configuration.</li> <li><code>cacheConfiguration()</code>: A private method that creates a simple cache configuration enabling statistics via the JCache programmatic configuration API.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java/#useful-details","title":"Useful details","text":"<ul> <li>The file does not specify any specific versions, frameworks, or dependencies.</li> <li>The configuration sets statistics enabled for the cache using the JCache API standard. Additional configuration options (like size limit) must be set via the selected JCache implementation.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CrashController.java/","title":"CrashController.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/system/CrashController.java/#overview","title":"Overview","text":"<p>The <code>CrashController.java</code> file is a controller class that is used to showcase what happens when an exception is thrown in a Spring Boot web application. It includes a method to trigger an exception and a corresponding endpoint to handle the exception.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CrashController.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CrashController.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the <code>CrashController.java</code> file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CrashController.java/#usage","title":"Usage","text":"<p>To utilize the <code>CrashController</code> in a Spring Boot web project, follow these steps: 1. Import the necessary classes:    <pre><code>import org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\n</code></pre> 2. Create an instance of <code>CrashController</code> or utilize it through dependency injection.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CrashController.java/#methods","title":"Methods","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/system/CrashController.java/#triggerexception","title":"<code>triggerException()</code>","text":"<p><pre><code>@GetMapping(\"/oups\")\npublic String triggerException() {\n    throw new RuntimeException(\"Expected: controller used to showcase what happens when an exception is thrown\");\n}\n</code></pre> This method is mapped to the <code>/oups</code> endpoint and is used to trigger an exception. When called, it throws a <code>RuntimeException</code> with a specific error message.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/CrashController.java/#useful-details","title":"Useful details","text":"<ul> <li>This file is part of the <code>org.springframework.samples.petclinic.system</code> package.</li> <li>It is licensed under the Apache License, Version 2.0.</li> <li>The controller includes a single method to trigger an exception, which can be useful for testing error handling and logging in a Spring Boot application.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java/","title":"WelcomeController.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java/#overview","title":"Overview","text":"<p>WelcomeController.java is a Java class that serves as a controller for handling requests related to the welcome page of a web application. It is responsible for directing the user to the welcome page when they access the root URL (\"/\") of the application.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use WelcomeController.java.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java/#usage","title":"Usage","text":"<p>To use the WelcomeController in a project, it needs to be instantiated as part of a larger Spring Boot application. This involves configuring the controller to be scanned and initialized by the Spring framework, and mapping the appropriate URL endpoints to its methods.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java/#methods","title":"Methods","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java/#welcome","title":"welcome()","text":"<ul> <li>Description: Handles the GET request for the root URL (\"/\") and returns the name of the welcome page to be displayed.</li> <li>Parameters: None</li> <li>Return Value: String - the name of the welcome page</li> <li>Example:     <pre><code>@GetMapping(\"/\")\npublic String welcome() {\n    return \"welcome\";\n}\n</code></pre></li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/system/WelcomeController.java/#useful-details","title":"Useful details","text":"<ul> <li>This class is part of the org.springframework.samples.petclinic.system package.</li> <li>It is annotated with <code>@Controller</code> to indicate that it is a Spring MVC controller.</li> <li>The method <code>welcome()</code> is annotated with <code>@GetMapping(\"/\")</code> to handle GET requests for the root URL.</li> <li>The class is licensed under the Apache License, Version 2.0.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Specialty.java/","title":"Specialty.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Specialty.java/#overview","title":"Overview","text":"<p>The Specialty.java file is a part of the Spring PetClinic project and is responsible for modeling a veterinarian's specialty, such as dentistry, within the application. It extends the NamedEntity class and is used to define and manage the specialties of individual vets.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Specialty.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Specialty.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites for using this file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Specialty.java/#usage","title":"Usage","text":"<p>To use the Specialty class in a project, you can instantiate it and set the name of the specialty using its inherited methods from the NamedEntity class. For example: <pre><code>Specialty dentistry = new Specialty();\ndentistry.setName(\"Dentistry\");\n</code></pre></p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Specialty.java/#methods","title":"Methods","text":"<p>The Specialty class does not have any additional methods beyond those inherited from the NamedEntity class. It inherits methods for setting and getting the name of the specialty.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Specialty.java/#useful-details","title":"Useful details","text":"<ul> <li>Framework: Spring PetClinic</li> <li>Dependencies: org.springframework.samples.petclinic.model.NamedEntity</li> <li>Version: 2012-2019</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vet.java/","title":"Vet.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vet.java/#overview","title":"Overview","text":"<p>The Vet.java file is a Java class that represents a veterinarian in a pet clinic management system. It extends the <code>Person</code> class and includes functionalities related to managing specialties and details of veterinarians.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vet.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vet.java/#prerequisites","title":"Prerequisites","text":"<p>No specific prerequisites are mentioned in the file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vet.java/#usage","title":"Usage","text":"<p>To use the <code>Vet</code> class in a project, you can instantiate it as follows: <pre><code>Vet vet = new Vet();\n</code></pre> You can then utilize the methods and properties of the <code>Vet</code> class to manage specialties and other details related to a veterinarian.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vet.java/#methods","title":"Methods","text":"<ul> <li><code>getSpecialtiesInternal()</code>: Protected method that returns the internal set of specialties.</li> <li><code>setSpecialtiesInternal(Set&lt;Specialty&gt; specialties)</code>: Protected method to set the internal set of specialties.</li> <li><code>getSpecialties()</code>: Public method that returns a sorted list of specialties.</li> <li><code>getNrOfSpecialties()</code>: Public method to get the number of specialties for the veterinarian.</li> <li><code>addSpecialty(Specialty specialty)</code>: Public method to add a specialty to the veterinarian's list of specialties.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vet.java/#useful-details","title":"Useful details","text":"<ul> <li>Frameworks: The class uses <code>jakarta.persistence</code> annotations for entity and table management.</li> <li>Dependencies: It has a dependency on the <code>Specialty</code> class.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/","title":"VetController.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#overview","title":"Overview","text":"<p>The <code>VetController</code> is a Java class that serves as a controller for handling vet-related requests in a software project. It is responsible for handling requests related to displaying a list of vets, and provides methods for paginating and retrieving vet data.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>Spring Framework</li> <li>VetRepository</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#usage","title":"Usage","text":"<p>To use the <code>VetController</code> in a project, it needs to be instantiated and used to handle vet-related requests. An instance of <code>VetRepository</code> also needs to be provided as a dependency for the controller.</p> <pre><code>VetRepository vetRepository = // instantiate VetRepository\nVetController vetController = new VetController(vetRepository);\n</code></pre>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#methods","title":"Methods","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#showvetlist","title":"showVetList","text":"<p><pre><code>public String showVetList(@RequestParam(defaultValue = \"1\") int page, Model model)\n</code></pre> This method is responsible for displaying a paginated list of vets. It takes a page number and a Model as parameters, and returns the view for the vet list.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#addpaginationmodel","title":"addPaginationModel","text":"<p><pre><code>private String addPaginationModel(int page, Page&lt;Vet&gt; paginated, Model model)\n</code></pre> This method adds pagination-related attributes to the model for displaying the vet list.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#findpaginated","title":"findPaginated","text":"<p><pre><code>private Page&lt;Vet&gt; findPaginated(int page)\n</code></pre> This method retrieves paginated vet data from the <code>VetRepository</code> based on the given page number.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#showresourcesvetlist","title":"showResourcesVetList","text":"<p><pre><code>public @ResponseBody Vets showResourcesVetList()\n</code></pre> This method is responsible for returning a list of vets as a JSON response. It returns an object of type 'Vets' containing the vet list.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetController.java/#useful-details","title":"Useful details","text":"<ul> <li>The controller uses Spring's <code>@Controller</code> and <code>@GetMapping</code> annotations to handle requests.</li> <li>It utilizes <code>VetRepository</code> for retrieving vet data.</li> <li>Pagination is implemented for displaying the list of vets.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java/","title":"VetRepository.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java/#overview","title":"Overview","text":"<p>The VetRepository.java file is a part of the Spring PetClinic project and serves as a repository class for the Vet domain objects. It provides methods to retrieve Vet objects from the data store and is compliant with Spring Data naming conventions, making it easily extendable for Spring Data.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>Dependency on Spring Framework</li> <li>Java version compatibility</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java/#usage","title":"Usage","text":"<p>To use the VetRepository in a project, you need to instantiate it and call the provided methods to retrieve Vet objects from the data store. It can be extended for Spring Data by following the Spring Data naming conventions.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java/#methods","title":"Methods","text":"<ul> <li><code>findAll()</code>: Retrieve all Vet objects from the data store.</li> <li>Returns a Collection of Vet objects.</li> <li>Throws DataAccessException.</li> <li><code>findAll(Pageable pageable)</code>: Retrieve all Vet objects from the data store in pages.</li> <li>Parameters: pageable - Pageable object for pagination.</li> <li>Returns a Page of Vet objects.</li> <li>Throws DataAccessException.</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/VetRepository.java/#useful-details","title":"Useful details","text":"<ul> <li>Authors: Ken Krebs, Juergen Hoeller, Sam Brannen, Michael Isvy</li> <li>Framework: Spring</li> <li>Dependencies: Spring Data, Spring Cache</li> <li>Licensing: Apache License, Version 2.0</li> </ul> <p>The VetRepository.java file provides a clear and concise way to interact with the data store and retrieve Vet objects, making it an essential component of the larger PetClinic project.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vets.java/","title":"Vets.java","text":""},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vets.java/#overview","title":"Overview","text":"<p>This Java class represents a simple domain object that is used to store a list of veterinarians. It is primarily designed to be used for the 'vets' view in the Spring Framework's web application, and is intended for use with the XML marshalling view.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vets.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vets.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vets.java/#usage","title":"Usage","text":"<p>To use the <code>Vets</code> class in a project, you can instantiate it as follows:</p> <pre><code>Vets vets = new Vets();\n</code></pre> <p>Once instantiated, you can add veterinarians to the list and retrieve the list using the provided methods.</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vets.java/#methods","title":"Methods","text":"<p>The <code>Vets</code> class provides the following method:</p>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vets.java/#getvetlist","title":"<code>getVetList()</code>","text":"<ul> <li>Description: Returns the list of veterinarians.</li> <li>Parameters: None</li> <li>Return value: <code>List&lt;Vet&gt;</code> - the list of veterinarians</li> </ul>"},{"location":"src/main/java/org/springframework/samples/petclinic/vet/Vets.java/#useful-details","title":"Useful details","text":"<ul> <li>This class is licensed under the Apache License, Version 2.0.</li> <li>It uses the <code>jakarta.xml.bind</code> annotations for XML marshalling.</li> <li>The class is part of the <code>org.springframework.samples.petclinic.vet</code> package.</li> <li>The original author of this class is Arjen Poutsma.</li> </ul>"},{"location":"src/main/resources/application-mysql.properties/","title":"application-mysql.properties","text":""},{"location":"src/main/resources/application-mysql.properties/#overview","title":"Overview","text":"<p>The 'application-mysql.properties' file is used to configure the database settings for a software project, specifically for MySQL. It includes properties for the database connection URL, username, password, and SQL initialization mode.</p>"},{"location":"src/main/resources/application-mysql.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/application-mysql.properties/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file, other than having a MySQL database server available.</p>"},{"location":"src/main/resources/application-mysql.properties/#usage","title":"Usage","text":"<p>To use the 'application-mysql.properties' file in a project, you can include it in the project's configuration directory. The properties can be customized by setting environment variables or directly modifying the file. Here's an example of how to configure the MySQL database settings using this file in a Spring Boot application:</p> <pre><code>@SpringBootApplication\n@PropertySource(\"classpath:application-mysql.properties\")\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApplication.class, args);\n    }\n}\n</code></pre>"},{"location":"src/main/resources/application-mysql.properties/#methods","title":"Methods","text":"<p>The file does not contain any methods or functions. It simply includes key-value pairs for configuring the MySQL database connection.</p>"},{"location":"src/main/resources/application-mysql.properties/#useful-details","title":"Useful details","text":"<ul> <li>The file specifies the database type as 'mysql' using the 'database' property.</li> <li>It sets the database connection URL, username, and password using the 'spring.datasource.url', 'spring.datasource.username', and 'spring.datasource.password' properties respectively.</li> <li>The SQL initialization mode is set to 'always' using the 'spring.sql.init.mode' property, which means that the SQL scripts will be executed every time the application starts.</li> </ul> <p>This file is essential for configuring the MySQL database connection in a Spring Boot application and plays a crucial role in defining the database settings for the project.</p>"},{"location":"src/main/resources/application-postgres.properties/","title":"application-postgres.properties","text":""},{"location":"src/main/resources/application-postgres.properties/#overview","title":"Overview","text":"<p>The <code>application-postgres.properties</code> file is used to configure the PostgreSQL database connection for a software project. It includes properties for the database URL, username, password, and SQL initialization mode.</p>"},{"location":"src/main/resources/application-postgres.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/application-postgres.properties/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file other than having a PostgreSQL database available.</p>"},{"location":"src/main/resources/application-postgres.properties/#usage","title":"Usage","text":"<p>To use the <code>application-postgres.properties</code> file in a project, simply include it in the project's configuration or properties folder. The properties defined in this file will be used by the application to establish a connection to the PostgreSQL database.</p>"},{"location":"src/main/resources/application-postgres.properties/#useful-details","title":"Useful details","text":"<ul> <li><code>database</code>: Specifies the database type, in this case, it is set to <code>postgres</code>.</li> <li><code>spring.datasource.url</code>: Specifies the URL for the PostgreSQL database. It is set to <code>jdbc:postgresql://localhost/petclinic</code>, with the option to override it using the <code>POSTGRES_URL</code> environment variable.</li> <li><code>spring.datasource.username</code>: Specifies the username for the PostgreSQL database. It is set to <code>petclinic</code>, with the option to override it using the <code>POSTGRES_USER</code> environment variable.</li> <li><code>spring.datasource.password</code>: Specifies the password for the PostgreSQL database. It is set to <code>petclinic</code>, with the option to override it using the <code>POSTGRES_PASS</code> environment variable.</li> <li><code>spring.sql.init.mode</code>: Specifies the SQL initialization mode for the application. It is set to <code>always</code>, indicating that SQL initialization should always be performed.</li> </ul> <p>The properties in this file can be customized as needed for different environments or configurations. For example, the database URL, username, and password can be overridden using environment variables to ensure flexibility and security in different deployment scenarios.</p>"},{"location":"src/main/resources/application.properties/","title":"application.properties","text":""},{"location":"src/main/resources/application.properties/#overview","title":"Overview","text":"<p>The <code>application.properties</code> file is a configuration file used in a Java Spring project. It contains key-value pairs that configure various aspects of the application, such as the database, web settings, JPA, internationalization, actuator, logging, and resource caching. This file plays a crucial role in defining the behavior and settings of the application.</p>"},{"location":"src/main/resources/application.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/application.properties/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file. However, the application itself may have dependencies on Spring, Hibernate, and other related frameworks.</p>"},{"location":"src/main/resources/application.properties/#usage","title":"Usage","text":"<p>To use the <code>application.properties</code> file, it should be located in the <code>src/main/resources</code> directory of the Java project. The configuration properties defined in this file will be automatically picked up by the Spring application context during startup. Developers can modify the values of the properties to customize the behavior of the application.</p>"},{"location":"src/main/resources/application.properties/#useful-details","title":"Useful details","text":"<ul> <li><code>database</code>: Specifies the database being used (in this case, it is set to H2, but it also supports MySQL).</li> <li><code>spring.sql.init.schema-locations</code> and <code>spring.sql.init.data-locations</code>: Define the locations of the schema and data SQL files for database initialization.</li> <li><code>spring.thymeleaf.mode</code>: Sets the mode for Thymeleaf, a popular Java templating engine often used for web applications.</li> <li><code>spring.jpa.hibernate.ddl-auto</code>: Configures the behavior of Hibernate's DDL generation.</li> <li><code>spring.jpa.open-in-view</code>: Controls whether to register OpenEntityManagerInViewInterceptor.</li> <li><code>spring.messages.basename</code>: Defines the base name for the message properties files for internationalization.</li> <li><code>management.endpoints.web.exposure.include</code>: Specifies which endpoints are exposed by the actuator.</li> <li><code>logging.level</code>: Configures the logging levels for various packages.</li> <li><code>spring.web.resources.cache.cachecontrol.max-age</code>: Sets the maximum time static resources should be cached.</li> </ul> <p>This file provides a centralized location to configure various aspects of the application, making it easier to manage and maintain the project.</p>"},{"location":"src/main/resources/db/h2/data.sql/","title":"data.sql","text":""},{"location":"src/main/resources/db/h2/data.sql/#overview","title":"Overview","text":"<p>The 'data.sql' file contains a series of SQL INSERT statements to populate a database with sample data for a veterinary clinic management system. It includes sample data for vets, specialties, vet_specialties, types, owners, pets, and visits.</p>"},{"location":"src/main/resources/db/h2/data.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/h2/data.sql/#prerequisites","title":"Prerequisites","text":"<p>No specific prerequisites are mentioned in the file. It assumes that the database structure is already in place and that the user has the necessary permissions to execute the SQL statements.</p>"},{"location":"src/main/resources/db/h2/data.sql/#usage","title":"Usage","text":"<p>To use the 'data.sql' file, the user needs to have access to a database management system (such as MySQL, PostgreSQL, etc.) where they can execute SQL statements. The file can be executed directly in the database management system to populate the database with the sample data.</p>"},{"location":"src/main/resources/db/h2/data.sql/#useful-details","title":"Useful details","text":"<ul> <li>The file contains INSERT statements for populating the following tables: vets, specialties, vet_specialties, types, owners, pets, and visits.</li> <li>The data provided is sample data for the veterinary clinic management system.</li> <li>It is assumed that the database structure is already in place, and the user has the necessary permissions to execute the SQL statements.</li> </ul>"},{"location":"src/main/resources/db/h2/schema.sql/","title":"schema.sql","text":""},{"location":"src/main/resources/db/h2/schema.sql/#overview","title":"Overview","text":"<p>The 'schema.sql' file contains SQL code for creating and configuring the database schema for a veterinary clinic management system. It defines the tables for vets, specialties, vet specialties, types, owners, pets, and visits, along with their respective columns, primary keys, foreign keys, and indexes. This schema is essential for setting up the database structure and relationships necessary for the proper functioning of the veterinary clinic management system.</p>"},{"location":"src/main/resources/db/h2/schema.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/h2/schema.sql/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites mentioned in the file. However, it is assumed that a database management system such as MySQL or PostgreSQL is already installed and configured to execute the SQL commands in this file.</p>"},{"location":"src/main/resources/db/h2/schema.sql/#usage","title":"Usage","text":"<p>To utilize this schema in a project, the SQL commands in the 'schema.sql' file need to be executed in a database management system. This can be done using a database management tool or by running the SQL script directly against the database.</p>"},{"location":"src/main/resources/db/h2/schema.sql/#useful-details","title":"Useful details","text":"<ul> <li>The file contains SQL code for creating tables, defining their columns, primary keys, foreign keys, and indexes.</li> <li>It sets up the database schema for managing vets, specialties, vet specialties, types, owners, pets, and visits.</li> <li>The schema is designed to support the functionality of a veterinary clinic management system, allowing for the storage and management of data related to vets, specialties, pets, owners, and visits.</li> </ul> <p>The SQL commands in this file can be used to create the necessary database tables and relationships for the veterinary clinic management system. For example:</p> <pre><code>CREATE TABLE vets (\n  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n  first_name VARCHAR(30),\n  last_name  VARCHAR(30)\n);\n</code></pre> <p>This command creates a table named 'vets' with columns for 'id', 'first_name', and 'last_name', along with a primary key constraint on the 'id' column.</p>"},{"location":"src/main/resources/db/hsqldb/data.sql/","title":"data.sql","text":""},{"location":"src/main/resources/db/hsqldb/data.sql/#overview","title":"Overview","text":"<p>The 'data.sql' file contains a series of SQL INSERT statements to populate a database with sample data related to a veterinary clinic. It includes data for vets, specialties, vet_specialties, types, owners, pets, and visits.</p> <p>This file serves the purpose of providing initial data for the veterinary clinic database, allowing for testing and development of the database schema and application functionality.</p>"},{"location":"src/main/resources/db/hsqldb/data.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/hsqldb/data.sql/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites for using the 'data.sql' file. It can be executed on a database server that supports SQL.</p>"},{"location":"src/main/resources/db/hsqldb/data.sql/#usage","title":"Usage","text":"<p>To use the 'data.sql' file, simply execute the SQL INSERT statements within it on a compatible database server. This will populate the database with sample data for vets, specialties, vet_specialties, types, owners, pets, and visits.</p>"},{"location":"src/main/resources/db/hsqldb/data.sql/#methods","title":"Methods","text":"<p>The 'data.sql' file does not contain methods or functions in the traditional programming sense. Instead, it contains a series of SQL INSERT statements to add data to the database tables.</p>"},{"location":"src/main/resources/db/hsqldb/data.sql/#useful-details","title":"Useful details","text":"<p>The 'data.sql' file does not specify any particular versions, frameworks, or dependencies. It simply provides sample data for a veterinary clinic database. The data includes information about vets, their specialties, types of pets, pet owners, pets, and visits made by the pets to the clinic. The data serves as a starting point for testing and development of the veterinary clinic application.</p>"},{"location":"src/main/resources/db/hsqldb/schema.sql/","title":"schema.sql","text":""},{"location":"src/main/resources/db/hsqldb/schema.sql/#overview","title":"Overview","text":"<p>The 'schema.sql' file contains SQL statements to create and define the structure of various tables for a database. These tables are related to a veterinary clinic management system, including tables for vets, specialties, vet specialties, types of pets, owners, pets, and visits. This file plays a crucial role in setting up the database schema for the veterinary clinic software project.</p>"},{"location":"src/main/resources/db/hsqldb/schema.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/hsqldb/schema.sql/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the 'schema.sql' file. It can be executed in any SQL database management system that supports the SQL syntax used in the file.</p>"},{"location":"src/main/resources/db/hsqldb/schema.sql/#usage","title":"Usage","text":"<p>To use the 'schema.sql' file in a project, it can be executed in a SQL database management system to create the necessary tables and define their structure. The SQL statements in the file will create the tables and their respective columns, primary keys, foreign keys, and indexes.</p>"},{"location":"src/main/resources/db/hsqldb/schema.sql/#methods","title":"Methods","text":"<p>The 'schema.sql' file does not contain methods or functions in the traditional programming sense. However, the SQL statements within the file effectively serve as commands to create, modify, and define the database schema. These statements include creating tables, defining columns, setting primary keys, creating indexes, and establishing foreign key constraints.</p>"},{"location":"src/main/resources/db/hsqldb/schema.sql/#useful-details","title":"Useful details","text":"<ul> <li>The SQL statements in the file are written in a syntax compatible with SQL database management systems such as PostgreSQL, MySQL, SQLite, etc.</li> <li>The file defines the structure of tables related to a veterinary clinic management system, including vets, specialties, vet specialties, types, owners, pets, and visits.</li> <li>The file includes the definition of primary keys, foreign keys, and indexes to ensure data integrity and query performance within the database.</li> <li>The 'schema.sql' file provides a foundational structure for the database that will be utilized by the larger software project for managing a veterinary clinic.</li> </ul>"},{"location":"src/main/resources/db/mysql/data.sql/","title":"data.sql","text":""},{"location":"src/main/resources/db/mysql/data.sql/#overview","title":"Overview","text":"<p>The 'data.sql' file contains a series of SQL INSERT statements to populate various tables in a database. These tables include 'vets', 'specialties', 'vet_specialties', 'types', 'owners', 'pets', and 'visits'. The purpose of this file is to provide initial data for these tables, which would be used in a veterinary management system or a similar application.</p>"},{"location":"src/main/resources/db/mysql/data.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/mysql/data.sql/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the file. It assumes that the database structure is already in place.</p>"},{"location":"src/main/resources/db/mysql/data.sql/#usage","title":"Usage","text":"<p>To use the 'data.sql' file, simply execute the SQL INSERT statements in a database management tool such as MySQL Workbench or through a script using a programming language.</p> <p>Example using MySQL command line: <pre><code>mysql -u username -p database_name &lt; data.sql\n</code></pre></p>"},{"location":"src/main/resources/db/mysql/data.sql/#methods","title":"Methods","text":"<p>The file does not contain traditional methods or functions, but rather a series of SQL INSERT statements to populate the database tables. Each INSERT statement adds a new row of data to the respective table.</p>"},{"location":"src/main/resources/db/mysql/data.sql/#useful-details","title":"Useful details","text":"<p>The file does not mention any specific versions, frameworks, or dependencies. It provides the initial data for the following tables: - vets - specialties - vet_specialties - types - owners - pets - visits</p> <p>The data inserted into these tables includes information about veterinary professionals, pet types, pet owners, and pet visits. The provided data sets the foundation for further development of the veterinary management system or application.</p>"},{"location":"src/main/resources/db/mysql/schema.sql/","title":"schema.sql","text":""},{"location":"src/main/resources/db/mysql/schema.sql/#overview","title":"Overview","text":"<p>The 'schema.sql' file contains SQL code to create tables for a database that could be used in a software project. The tables are designed for a veterinary clinic management system. The file includes the creation of tables for vets, specialties, vet_specialties, types, owners, pets, and visits.</p>"},{"location":"src/main/resources/db/mysql/schema.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/mysql/schema.sql/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the file.</p>"},{"location":"src/main/resources/db/mysql/schema.sql/#usage","title":"Usage","text":"<p>To use the schema.sql file, you can run the SQL code in a MySQL database management system to create the tables. Once the tables are created, they can be used to store and manage data related to a veterinary clinic, such as information about vets, specialties, pets, owners, and visits.</p> <pre><code>source path_to_schema.sql;\n</code></pre>"},{"location":"src/main/resources/db/mysql/schema.sql/#useful-details","title":"Useful details","text":"<p>The SQL code in the file is designed for use with a MySQL database management system. The tables are created with the InnoDB storage engine. The file includes the creation of tables for vets, specialties, vet_specialties, types, owners, pets, and visits. Each table has its own set of columns and constraints to store specific information related to a veterinary clinic.</p>"},{"location":"src/main/resources/db/mysql/user.sql/","title":"user.sql","text":""},{"location":"src/main/resources/db/mysql/user.sql/#overview","title":"Overview","text":"<p>The 'user.sql' file contains SQL commands to create a database, set its character set and collation, and grant privileges to a user for the 'petclinic' project.</p> <p>This file plays a crucial role in setting up the database for the 'petclinic' project and ensuring that the required user has the necessary privileges.</p>"},{"location":"src/main/resources/db/mysql/user.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/mysql/user.sql/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the 'user.sql' file. It assumes that the user has access to a MySQL database server.</p>"},{"location":"src/main/resources/db/mysql/user.sql/#usage","title":"Usage","text":"<p>To use the 'user.sql' file, execute the SQL commands within a MySQL database management tool such as MySQL Workbench or the MySQL command line interface.</p> <pre><code>source path/to/user.sql;\n</code></pre>"},{"location":"src/main/resources/db/mysql/user.sql/#methods","title":"Methods","text":"<p>The 'user.sql' file does not contain traditional methods or functions. Instead, it contains SQL commands to create a database, alter its settings, and grant privileges to a user.</p>"},{"location":"src/main/resources/db/mysql/user.sql/#useful-details","title":"Useful details","text":"<p>The 'user.sql' file does not mention any specific versions, frameworks, or dependencies. It is a standalone SQL script that can be used with any MySQL database server. However, it is important to ensure that the user executing the script has the necessary privileges to create databases and grant privileges to other users.</p> <p>Additional details that may be helpful include ensuring that the database server is running and that the user executing the script has the necessary permissions.</p>"},{"location":"src/main/resources/db/postgres/data.sql/","title":"data.sql","text":""},{"location":"src/main/resources/db/postgres/data.sql/#overview","title":"Overview","text":"<p>The <code>data.sql</code> file contains a series of SQL insert statements that populate a database with sample data. It inserts records into multiple tables, including <code>vets</code>, <code>specialties</code>, <code>vet_specialties</code>, <code>types</code>, <code>owners</code>, <code>pets</code>, and <code>visits</code>. The purpose of this file is to provide initial data for testing and demonstration purposes in a software project.</p>"},{"location":"src/main/resources/db/postgres/data.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/postgres/data.sql/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites mentioned in the file. However, it assumes that a database schema is already set up with the necessary tables.</p>"},{"location":"src/main/resources/db/postgres/data.sql/#usage","title":"Usage","text":"<p>To use the <code>data.sql</code> file, follow these steps: 1. Make sure the database schema is set up with the necessary tables. 2. Execute the SQL statements in the <code>data.sql</code> file in the database management system of your choice. 3. The statements will populate the tables with sample data.</p> <p>Example: <pre><code>-- Assuming the database is already set up and connected\n-- Execute the SQL statements in the data.sql file\n-- This can be done using a database management tool or by running the file directly in the database console\n</code></pre></p>"},{"location":"src/main/resources/db/postgres/data.sql/#methods","title":"Methods","text":"<p>There are no methods or functions in the <code>data.sql</code> file. It only contains SQL insert statements to populate the database with sample data.</p>"},{"location":"src/main/resources/db/postgres/data.sql/#useful-details","title":"Useful details","text":"<p>The <code>data.sql</code> file does not mention any specific versions, frameworks, or dependencies. It is assumed to be used with a database management system that supports SQL.</p> <p>Additional details that may be helpful: - The insert statements are using the <code>INSERT INTO</code> syntax to insert data into the respective tables. - The <code>SELECT</code> statements within the insert statements are used to check if a record already exists before inserting it. - The <code>WHERE NOT EXISTS</code> clauses ensure that duplicate records are not inserted. - The <code>ON CONFLICT (vet_id, specialty_id) DO NOTHING</code> clause in the <code>vet_specialties</code> table insert statements is used to handle conflicts if a record with the same vet_id and specialty_id already exists. It specifies that in case of a conflict, nothing should be done. - The values in the insert statements are hardcoded sample data for demonstration purposes. In a real-world scenario, these values would be replaced with actual data. - The <code>pets</code> table has a foreign key constraint <code>type_id</code> that references the <code>types</code> table. The <code>owner_id</code> column in the <code>pets</code> table references the <code>id</code> column in the <code>owners</code> table. - The <code>visits</code> table has a foreign key constraint <code>pet_id</code> that references the <code>id</code> column in the <code>pets</code> table. - The <code>visit_date</code> column in the <code>visits</code> table is of type <code>DATE</code>. - The <code>description</code> column in the <code>visits</code> table is a text field used to describe the purpose of the visit.</p>"},{"location":"src/main/resources/db/postgres/schema.sql/","title":"schema.sql","text":""},{"location":"src/main/resources/db/postgres/schema.sql/#overview","title":"Overview","text":"<p>The <code>schema.sql</code> file contains SQL code to create tables and indexes for a database schema related to a veterinary clinic. It defines the structure and relationships between various entities such as vets, specialties, vet_specialties, types, owners, pets, and visits. This schema plays a crucial role in organizing and managing data for the veterinary clinic application.</p>"},{"location":"src/main/resources/db/postgres/schema.sql/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/db/postgres/schema.sql/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this SQL file.</p>"},{"location":"src/main/resources/db/postgres/schema.sql/#usage","title":"Usage","text":"<p>To use the <code>schema.sql</code> in a project, you can execute the SQL commands in a database management tool such as MySQL Workbench, PostgreSQL, or any other RDBMS that supports SQL. Simply copy and paste the content of this file into the query editor and run the script to create the database schema.</p>"},{"location":"src/main/resources/db/postgres/schema.sql/#methods","title":"Methods","text":"<p>The <code>schema.sql</code> file does not contain traditional methods or functions like a programming language file. Instead, it consists of SQL commands to create tables, define relationships, and create indexes. Each section of the file corresponds to creating a specific table or index, which defines the structure and constraints for the database schema.</p>"},{"location":"src/main/resources/db/postgres/schema.sql/#useful-details","title":"Useful details","text":"<p>The SQL file creates the following tables: - <code>vets</code> - <code>specialties</code> - <code>vet_specialties</code> - <code>types</code> - <code>owners</code> - <code>pets</code> - <code>visits</code></p> <p>It also creates indexes on certain columns to improve query performance.</p> <p>Additional details that may be helpful to the reader include the fact that the schema defines relationships between tables using foreign key constraints, and it enforces uniqueness using unique constraints. The <code>GENERATED BY DEFAULT AS IDENTITY</code> clause is used to create auto-increment primary keys for some tables.</p>"},{"location":"src/main/resources/messages/messages.properties/","title":"messages.properties","text":""},{"location":"src/main/resources/messages/messages.properties/#overview","title":"Overview","text":"<p>The 'messages.properties' file is used to store key-value pairs of messages or text that are used in a software project. These messages are typically used for internationalization and localization purposes, allowing the project to display different languages or variations of text based on user preferences or location.</p>"},{"location":"src/main/resources/messages/messages.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Messages</li> </ol>"},{"location":"src/main/resources/messages/messages.properties/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the 'messages.properties' file.</p>"},{"location":"src/main/resources/messages/messages.properties/#usage","title":"Usage","text":"<p>To use the messages defined in this file, the project would typically load this file and access the values by their keys. For example, in a Java project using Spring Framework, the messages can be accessed using the <code>MessageSource</code> bean:</p> <pre><code>@Autowired\nprivate MessageSource messageSource;\n\npublic String getWelcomeMessage() {\n    return messageSource.getMessage(\"welcome\", null, Locale.getDefault());\n}\n</code></pre>"},{"location":"src/main/resources/messages/messages.properties/#messages","title":"Messages","text":"<ul> <li>welcome: \"Welcome\"</li> <li>required: \"is required\"</li> <li>notFound: \"has not been found\"</li> <li>duplicate: \"is already in use\"</li> <li>nonNumeric: \"must be all numeric\"</li> <li>duplicateFormSubmission: \"Duplicate form submission is not allowed\"</li> <li>typeMismatch.date: \"invalid date\"</li> <li>typeMismatch.birthDate: \"invalid date\"</li> </ul> <p>These messages can be used throughout the project to display user-friendly text, handle validation errors, or provide feedback to users. The key-value pairs follow a specific format where the key is on the left-hand side of the equals sign, followed by the corresponding message on the right-hand side. The messages can be easily updated or translated without changing the code, making the project more flexible and maintainable.</p>"},{"location":"src/main/resources/messages/messages_de.properties/","title":"messages_de.properties","text":""},{"location":"src/main/resources/messages/messages_de.properties/#overview","title":"Overview","text":"<p>The <code>messages_de.properties</code> file contains key-value pairs of messages in German, likely for localization and internationalization purposes in a software project. It is used to store message strings that can be referenced by the software to provide user-facing text in the German language.</p>"},{"location":"src/main/resources/messages/messages_de.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/messages/messages_de.properties/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites for using this file.</p>"},{"location":"src/main/resources/messages/messages_de.properties/#usage","title":"Usage","text":"<p>To use the messages in this file, the software project should have a mechanism to load and reference these message strings based on their keys. For example, in a Java project using the Spring framework, the <code>MessageSource</code> interface can be used to load these messages and resolve them based on their keys.</p>"},{"location":"src/main/resources/messages/messages_de.properties/#useful-details","title":"Useful details","text":"<p>This file does not contain any methods or functions, but it contains key-value pairs of messages in German. The messages cover a range of scenarios such as welcoming the user, indicating required fields, handling duplicate entries, non-numeric input, and type mismatches for dates.</p> <p>The messages are likely used for providing user feedback, error messages, and other user-facing text within the software application. The file does not have any specific framework or version dependencies mentioned.</p>"},{"location":"src/main/resources/messages/messages_en.properties/","title":"messages_en.properties","text":""},{"location":"src/main/resources/messages/messages_en.properties/#overview","title":"Overview","text":"<p>The <code>messages_en.properties</code> file is used for message look-ups in a software project. It serves as a fallback option for message look-ups if the default \"messages.properties\" file does not contain the required message.</p>"},{"location":"src/main/resources/messages/messages_en.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/messages/messages_en.properties/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the <code>messages_en.properties</code> file.</p>"},{"location":"src/main/resources/messages/messages_en.properties/#usage","title":"Usage","text":"<p>To use the <code>messages_en.properties</code> file in a project, simply ensure that it is present in the classpath. When a message look-up is performed, the application will automatically fall back to this file if the required message is not found in the default \"messages.properties\" file.</p>"},{"location":"src/main/resources/messages/messages_en.properties/#useful-details","title":"Useful details","text":"<p>There are no specific methods or functions in this file. It is intentionally left empty to serve as a fallback for message look-ups. This file does not require any specific versions, frameworks, or dependencies. Its primary purpose is to provide a fallback option for messages in the software project.</p>"},{"location":"src/main/resources/messages/messages_es.properties/","title":"messages_es.properties","text":""},{"location":"src/main/resources/messages/messages_es.properties/#overview","title":"Overview","text":"<p>The <code>messages_es.properties</code> file contains key-value pairs for various messages in Spanish. It is used for internationalization and localization of messages in a software project.</p>"},{"location":"src/main/resources/messages/messages_es.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/messages/messages_es.properties/#prerequisites","title":"Prerequisites","text":"<p>No specific dependencies or prerequisites are required to use this file.</p>"},{"location":"src/main/resources/messages/messages_es.properties/#usage","title":"Usage","text":"<p>To use the messages in this file, it can be loaded and accessed in a Java application using the <code>ResourceBundle</code> class. For example: <pre><code>ResourceBundle messages = ResourceBundle.getBundle(\"messages\", new Locale(\"es\"));\nString welcomeMessage = messages.getString(\"welcome\");\nSystem.out.println(welcomeMessage);\n</code></pre></p>"},{"location":"src/main/resources/messages/messages_es.properties/#methods","title":"Methods","text":"<p>The file does not contain methods or functions, but it provides key-value pairs for various messages, such as: - <code>welcome</code>: \"Bienvenido\" - <code>required</code>: \"Es requerido\" - <code>notFound</code>: \"No ha sido encontrado\" - <code>duplicate</code>: \"Ya se encuentra en uso\" - <code>nonNumeric</code>: \"S\u00f3lo debe contener numeros\" - <code>duplicateFormSubmission</code>: \"No se permite el env\u00edo de formularios duplicados\" - <code>typeMismatch.date</code>: \"Fecha invalida\" - <code>typeMismatch.birthDate</code>: \"Fecha invalida\"</p>"},{"location":"src/main/resources/messages/messages_es.properties/#useful-details","title":"Useful details","text":"<p>No specific versions, frameworks, or dependencies are mentioned in the file. The messages are related to common scenarios in software applications, such as validation, error handling, and user interface feedback. It is important to ensure that the correct locale is used when accessing the messages to display the appropriate language to the user.</p>"},{"location":"src/main/resources/messages/messages_ko.properties/","title":"messages_ko.properties","text":""},{"location":"src/main/resources/messages/messages_ko.properties/#overview","title":"Overview","text":"<p>The 'messages_ko.properties' file contains key-value pairs of messages in Korean, used for internationalization and localization in a software project. These messages are used to provide language-specific translations for different scenarios such as validation errors, success messages, and informational prompts.</p>"},{"location":"src/main/resources/messages/messages_ko.properties/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/main/resources/messages/messages_ko.properties/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use the 'messages_ko.properties' file. It can be used in any Java project that supports internationalization and localization.</p>"},{"location":"src/main/resources/messages/messages_ko.properties/#usage","title":"Usage","text":"<p>To use the messages in a Java project, the 'messages_ko.properties' file can be loaded using the ResourceBundle class. Here is an example of how to access a message in the file:</p> <pre><code>import java.util.ResourceBundle;\n\npublic class MessageExample {\n    public static void main(String[] args) {\n        ResourceBundle messages = ResourceBundle.getBundle(\"messages_ko\");\n        String welcomeMessage = messages.getString(\"welcome\");\n        System.out.println(welcomeMessage);\n    }\n}\n</code></pre> <p>In the above example, the ResourceBundle class is used to load the 'messages_ko.properties' file and the 'welcome' message is retrieved and printed.</p>"},{"location":"src/main/resources/messages/messages_ko.properties/#methods","title":"Methods","text":"<p>The file does not contain methods or functions in the traditional sense, as it consists of key-value pairs. Each key represents a specific message or prompt, and the corresponding value is the translation of that message in Korean.</p>"},{"location":"src/main/resources/messages/messages_ko.properties/#useful-details","title":"Useful details","text":"<p>The file does not specify any versions, frameworks, or dependencies. It simply contains key-value pairs of messages in Korean. It is important to ensure that the file is properly encoded in UTF-8 to support Korean characters. Additionally, the file can be easily extended by adding more key-value pairs for additional messages or translations.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java/","title":"MySqlIntegrationTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java/#overview","title":"Overview","text":"<p>The <code>MySqlIntegrationTests</code> Java class contains integration tests for a Spring Boot application. It is specifically focused on testing the MySQL database integration with the application. The class is responsible for testing the functionality related to retrieving vet information and owner details from the MySQL database.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>The class has dependencies on Spring Boot, JUnit Jupiter, AssertJ, and Testcontainers.</li> <li>It requires a MySQL container to be available for testing.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java/#usage","title":"Usage","text":"<p>To use the <code>MySqlIntegrationTests</code> class in a project, follow these steps: 1. Ensure that the project has the necessary dependencies on Spring Boot, JUnit Jupiter, AssertJ, and Testcontainers. 2. Start a MySQL container for testing purposes. 3. Instantiate the <code>MySqlIntegrationTests</code> class and utilize its methods to test the MySQL integration functionality.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java/#methods","title":"Methods","text":"<ul> <li><code>testFindAll()</code>: This method tests the functionality of retrieving all vet information from the MySQL database. It makes use of the <code>vets</code> repository to perform the test.</li> <li><code>testOwnerDetails()</code>: This method tests the functionality of retrieving owner details from the MySQL database. It uses a <code>RestTemplate</code> to make a request to the application running at a random port and verifies the response status.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/MySqlIntegrationTests.java/#useful-details","title":"Useful details","text":"<ul> <li>The class is annotated with <code>@SpringBootTest</code> to indicate that it is a Spring Boot test and to specify the web environment as a random port.</li> <li>It uses the <code>@ActiveProfiles</code> annotation to activate the \"mysql\" profile for the tests.</li> <li>Testcontainers are used to manage the MySQL container for testing purposes.</li> <li>The MySQL container version is specified as \"mysql:8.2\".</li> <li>The class makes use of dependency injection for <code>VetRepository</code> and <code>RestTemplateBuilder</code>.</li> <li>Some test annotations like <code>@DisabledInNativeImage</code> and <code>@DisabledInAotMode</code> are used to specify when the tests should be disabled.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/","title":"MysqlTestApplication.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/#overview","title":"Overview","text":"<p>The <code>MysqlTestApplication</code> Java class is a configuration file for the PetClinic Spring Boot Application. It includes a method to instantiate a MySQLContainer for testing purposes and a main method to run the Spring application with a MySQL profile.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>Spring Boot framework</li> <li>Testcontainers library</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/#usage","title":"Usage","text":"<p>To use the <code>MysqlTestApplication</code> class in a project, you need to have the Spring Boot framework and the Testcontainers library included in your project dependencies. You can then instantiate the <code>MySQLContainer</code> by calling the <code>container()</code> method and use the <code>main()</code> method to run the Spring application with the MySQL profile active.</p> <pre><code>MySQLContainer&lt;?&gt; mysqlContainer = MysqlTestApplication.container();\nmysqlContainer.start();\n// Other application setup code\nMysqlTestApplication.main(new String[]{\"--spring.profiles.active=mysql\"});\n</code></pre>"},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/#methods","title":"Methods","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/#container","title":"<code>container()</code>","text":"<ul> <li>Description: Returns a new instance of <code>MySQLContainer</code> configured for MySQL 8.2.</li> <li>Return Type: <code>MySQLContainer&lt;?&gt;</code></li> <li>Parameters: None</li> <li>Example: <pre><code>MySQLContainer&lt;?&gt; mysqlContainer = MysqlTestApplication.container();\nmysqlContainer.start();\n</code></pre></li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/#mainstring-args","title":"<code>main(String[] args)</code>","text":"<ul> <li>Description: Runs the Spring Boot application with the MySQL profile active.</li> <li>Parameters:</li> <li><code>args</code> - Command line arguments</li> <li>Example: <pre><code>MysqlTestApplication.main(new String[]{\"--spring.profiles.active=mysql\"});\n</code></pre></li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/MysqlTestApplication.java/#useful-details","title":"Useful details","text":"<ul> <li>Framework: Spring Boot</li> <li>Dependencies: Testcontainers library</li> <li>MySQLContainer version: 8.2</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java/","title":"PetClinicIntegrationTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java/#overview","title":"Overview","text":"<p>This Java class is part of the PetClinic application and serves as the integration test suite for testing the functionality of the application in a real-world environment. It includes tests for finding all vets and retrieving owner details from the application's REST API.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>This file requires the following dependencies:</li> <li>Spring Boot</li> <li>JUnit 5</li> <li>RestTemplate</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java/#usage","title":"Usage","text":"<p>To use this class in a project, follow these steps: 1. Ensure that the project has the necessary dependencies listed in the prerequisites. 2. Instantiate the PetClinicIntegrationTests class within the test package of the project. 3. Run the tests using an appropriate testing framework (e.g., JUnit).</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java/#methods","title":"Methods","text":"<ul> <li><code>testFindAll()</code>: Method to test the functionality of finding all vets. It calls the <code>vets.findAll()</code> method and verifies that the result is served from the cache.</li> <li><code>testOwnerDetails()</code>: Method to test the retrieval of owner details from the application's REST API. It sends a request to retrieve owner details and verifies that the response status is OK.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/PetClinicIntegrationTests.java/#useful-details","title":"Useful details","text":"<ul> <li>This file is using Spring Boot's <code>@SpringBootTest</code> annotation with <code>WebEnvironment.RANDOM_PORT</code> for integration testing.</li> <li>It utilizes the <code>LocalServerPort</code> annotation to inject a random port for testing.</li> <li>The <code>VetRepository</code> and <code>RestTemplateBuilder</code> are autowired for use in the test methods.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/","title":"PostgresIntegrationTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#overview","title":"Overview","text":"<p><code>PostgresIntegrationTests.java</code> is a Java class that contains integration tests for the Postgres database integration in the PetClinic application. It tests various functionalities and interactions with the database, such as retrieving all vets and owner details. This class plays a role in ensuring the correct functioning and integration of the Postgres database with the PetClinic application.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#prerequisites","title":"Prerequisites","text":"<p>To use <code>PostgresIntegrationTests.java</code>, the following dependencies are required: - Apache Commons Logging - JUnit Jupiter - AssertJ - Spring Boot Test - Spring Web - Testcontainers - Docker</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#usage","title":"Usage","text":"<p>To use <code>PostgresIntegrationTests.java</code> in a project, follow these steps: 1. Ensure that all the required dependencies are included in the project. 2. Create a new instance of <code>PostgresIntegrationTests</code> or use dependency injection to obtain an instance. 3. Run the integration tests using a testing framework, such as JUnit.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#methods","title":"Methods","text":"<p>The following methods are available in <code>PostgresIntegrationTests.java</code>:</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#mainstring-args","title":"<code>main(String[] args)</code>","text":"<p>This method is the entry point for running the PetClinic application with the Postgres profile. It starts the application and sets the active profiles to \"postgres\". It also configures a listener to log the application's properties.</p> <p>Example: <pre><code>public static void main(String[] args) {\n    new SpringApplicationBuilder(PetClinicApplication.class)\n        .profiles(\"postgres\")\n        .properties(\"spring.docker.compose.profiles.active=postgres\")\n        .listeners(new PropertiesLogger())\n        .run(args);\n}\n</code></pre></p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#testfindall","title":"<code>testFindAll()</code>","text":"<p>This method tests the functionality of retrieving all vets from the database. It calls the <code>findAll()</code> method of the <code>VetRepository</code> and asserts that the result is not null.</p> <p>Example: <pre><code>@Test\nvoid testFindAll() throws Exception {\n    vets.findAll();\n    vets.findAll(); // served from cache\n}\n</code></pre></p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#testownerdetails","title":"<code>testOwnerDetails()</code>","text":"<p>This method tests the functionality of retrieving owner details from the PetClinic application's REST API. It sends a GET request to the \"/owners/{ownerId}\" endpoint and asserts that the response status is OK.</p> <p>Example: <pre><code>@Test\nvoid testOwnerDetails() {\n    RestTemplate template = builder.rootUri(\"http://localhost:\" + port).build();\n    ResponseEntity&lt;String&gt; result = template.exchange(RequestEntity.get(\"/owners/1\").build(), String.class);\n    assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);\n}\n</code></pre></p>"},{"location":"src/test/java/org/springframework/samples/petclinic/PostgresIntegrationTests.java/#useful-details","title":"Useful details","text":"<ul> <li>This class requires Docker to be available in order to run the integration tests.</li> <li>The <code>@SpringBootTest</code> annotation is used to configure the integration tests. It sets the web environment to RANDOM_PORT and specifies the \"postgres\" profile.</li> <li>The <code>@DisabledInNativeImage</code> annotation indicates that the integration tests should be disabled in a native image environment.</li> <li>The <code>PropertiesLogger</code> class is an application listener that logs the properties of the application's environment.</li> <li>The <code>printProperties()</code> method prints the properties of the environment, including any overridden values.</li> <li>The <code>findPropertiesPropertySources()</code> method finds the property sources in the environment that are enumerable.</li> <li>The <code>PostgresIntegrationTests</code> class uses autowiring to inject the <code>VetRepository</code> and <code>RestTemplateBuilder</code> dependencies.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/","title":"ValidatorTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/#overview","title":"Overview","text":"<p>The 'ValidatorTests.java' file contains a class that is responsible for testing the validation of bean properties using the Bean Validation framework. It contains a test method to ensure that the validation is working correctly when upgrading to a new version of Hibernate Validator/Bean Validation. This class plays a crucial role in ensuring the integrity and correctness of data input in the larger software project.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites mentioned in the file.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/#usage","title":"Usage","text":"<p>To use the 'ValidatorTests' class in a project, follow these steps: 1. Instantiate the 'ValidatorTests' class. 2. Call the test methods to validate bean properties.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/#methods","title":"Methods","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/#createvalidator","title":"createValidator","text":"<p><pre><code>private Validator createValidator()\n</code></pre> Creates and returns a validator instance using a LocalValidatorFactoryBean.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/#shouldnotvalidatewhenfirstnameempty","title":"shouldNotValidateWhenFirstNameEmpty","text":"<p><pre><code>@Test\nvoid shouldNotValidateWhenFirstNameEmpty()\n</code></pre> A test method to validate that the Bean Validation framework correctly identifies an empty first name property. It sets the locale, creates a 'Person' object, sets the first name as empty, and then validates the 'Person' object using the validator instance. It asserts that the validation produces the expected constraint violations.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java/#useful-details","title":"Useful details","text":"<ul> <li>The file uses the Apache License, Version 2.0.</li> <li>It imports classes from the 'org.springframework' and 'jakarta.validation' packages.</li> <li>The 'ValidatorTests' class serves as a testing mechanism for validating bean properties using the Bean Validation framework.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/","title":"OwnerControllerTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#overview","title":"Overview","text":"<p>The <code>OwnerControllerTests.java</code> file is a test class for the <code>OwnerController</code> in a pet clinic software project. It contains various test cases to ensure the correct behavior of the <code>OwnerController</code> class.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#prerequisites","title":"Prerequisites","text":"<p>No specific prerequisites or dependencies are mentioned in the file.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#usage","title":"Usage","text":"<p>To use this test class in a project, follow these steps: 1. Ensure that the required dependencies are included in the project. 2. Instantiate the <code>OwnerControllerTests</code> class. 3. Run the desired test methods to verify the functionality of the <code>OwnerController</code>.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#methods","title":"Methods","text":"<p>The <code>OwnerControllerTests</code> class contains the following methods:</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#setup","title":"<code>setup()</code>","text":"<p>This method is executed before each test case. It sets up mock data and behaviors using Mockito.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testinitcreationform","title":"<code>testInitCreationForm()</code>","text":"<p>This method tests the initialization of the creation form for a new owner. It sends a GET request to the \"/owners/new\" endpoint and expects a successful response with the \"createOrUpdateOwnerForm\" view.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testprocesscreationformsuccess","title":"<code>testProcessCreationFormSuccess()</code>","text":"<p>This method tests the successful processing of the creation form for a new owner. It sends a POST request to the \"/owners/new\" endpoint with the required parameters and expects a redirection response.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testprocesscreationformhaserrors","title":"<code>testProcessCreationFormHasErrors()</code>","text":"<p>This method tests the processing of the creation form for a new owner with errors. It sends a POST request to the \"/owners/new\" endpoint with missing parameters and expects an error response with the \"createOrUpdateOwnerForm\" view.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testinitfindform","title":"<code>testInitFindForm()</code>","text":"<p>This method tests the initialization of the find form for owners. It sends a GET request to the \"/owners/find\" endpoint and expects a successful response with the \"findOwners\" view.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testprocessfindformsuccess","title":"<code>testProcessFindFormSuccess()</code>","text":"<p>This method tests the successful processing of the find form for owners. It sends a GET request to the \"/owners?page=1\" endpoint and expects a successful response with the \"ownersList\" view.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testprocessfindformbylastname","title":"<code>testProcessFindFormByLastName()</code>","text":"<p>This method tests the processing of the find form for owners by last name. It sends a GET request to the \"/owners?page=1\" endpoint with a specific last name parameter and expects a redirection response to the owner details page.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testprocessfindformnoownersfound","title":"<code>testProcessFindFormNoOwnersFound()</code>","text":"<p>This method tests the processing of the find form for owners when no owners are found. It sends a GET request to the \"/owners?page=1\" endpoint with an unknown last name parameter and expects an error response with the \"findOwners\" view.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testinitupdateownerform","title":"<code>testInitUpdateOwnerForm()</code>","text":"<p>This method tests the initialization of the update owner form. It sends a GET request to the \"/owners/{ownerId}/edit\" endpoint with a specific owner ID and expects a successful response with the \"createOrUpdateOwnerForm\" view.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testprocessupdateownerformsuccess","title":"<code>testProcessUpdateOwnerFormSuccess()</code>","text":"<p>This method tests the successful processing of the update owner form. It sends a POST request to the \"/owners/{ownerId}/edit\" endpoint with the required parameters and expects a redirection response.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testprocessupdateownerformunchangedsuccess","title":"<code>testProcessUpdateOwnerFormUnchangedSuccess()</code>","text":"<p>This method tests the successful processing of the update owner form when no changes are made. It sends a POST request to the \"/owners/{ownerId}/edit\" endpoint without any parameters and expects a redirection response.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testprocessupdateownerformhaserrors","title":"<code>testProcessUpdateOwnerFormHasErrors()</code>","text":"<p>This method tests the processing of the update owner form with errors. It sends a POST request to the \"/owners/{ownerId}/edit\" endpoint with missing parameters and expects an error response with the \"createOrUpdateOwnerForm\" view.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#testshowowner","title":"<code>testShowOwner()</code>","text":"<p>This method tests the retrieval of owner details. It sends a GET request to the \"/owners/{ownerId}\" endpoint with a specific owner ID and expects a successful response with the owner details and associated pets.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/OwnerControllerTests.java/#useful-details","title":"Useful details","text":"<ul> <li>Framework: Spring Boot</li> <li>Dependencies: Mockito, Hamcrest, AssertJ</li> <li>Version: 2012-2019</li> <li>License: Apache License, Version 2.0</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java/","title":"PetControllerTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java/#overview","title":"Overview","text":"<p>The <code>PetControllerTests.java</code> file contains the test cases for the <code>PetController</code> class in the <code>org.springframework.samples.petclinic.owner</code> package. This file is part of the Pet Clinic project and is used to test the functionality of the PetController class.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites mentioned in the code file.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java/#usage","title":"Usage","text":"<p>To use the <code>PetControllerTests.java</code> file in a project, follow these steps: 1. Make sure the project has the required dependencies and frameworks mentioned in the code file. 2. Create an instance of the <code>PetControllerTests</code> class. 3. Run the test methods to test the functionality of the <code>PetController</code> class.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java/#methods","title":"Methods","text":"<p>The <code>PetControllerTests.java</code> file contains the following methods:</p> <ol> <li> <p><code>setup()</code>: This method is annotated with <code>@BeforeEach</code> and is executed before each test case. It sets up the mock objects and defines the behavior of the mock objects using the <code>given()</code> method from Mockito.</p> </li> <li> <p><code>testInitCreationForm()</code>: This method is annotated with <code>@Test</code> and tests the <code>initCreationForm()</code> method of the <code>PetController</code> class. It performs a GET request to the \"/owners/{ownerId}/pets/new\" endpoint and asserts the status, view name, and model attributes.</p> </li> <li> <p><code>testProcessCreationFormSuccess()</code>: This method is annotated with <code>@Test</code> and tests the <code>processCreationFormSuccess()</code> method of the <code>PetController</code> class. It performs a POST request to the \"/owners/{ownerId}/pets/new\" endpoint with the required parameters and asserts the status and view name.</p> </li> <li> <p><code>testProcessCreationFormHasErrors()</code>: This method is annotated with <code>@Test</code> and tests the <code>processCreationFormHasErrors()</code> method of the <code>PetController</code> class. It performs a POST request to the \"/owners/{ownerId}/pets/new\" endpoint with missing required parameters and asserts the model attributes, status, and view name.</p> </li> <li> <p><code>testInitUpdateForm()</code>: This method is annotated with <code>@Test</code> and tests the <code>initUpdateForm()</code> method of the <code>PetController</code> class. It performs a GET request to the \"/owners/{ownerId}/pets/{petId}/edit\" endpoint and asserts the status, model attributes, and view name.</p> </li> <li> <p><code>testProcessUpdateFormSuccess()</code>: This method is annotated with <code>@Test</code> and tests the <code>processUpdateFormSuccess()</code> method of the <code>PetController</code> class. It performs a POST request to the \"/owners/{ownerId}/pets/{petId}/edit\" endpoint with the required parameters and asserts the status and view name.</p> </li> <li> <p><code>testProcessUpdateFormHasErrors()</code>: This method is annotated with <code>@Test</code> and tests the <code>processUpdateFormHasErrors()</code> method of the <code>PetController</code> class. It performs a POST request to the \"/owners/{ownerId}/pets/{petId}/edit\" endpoint with missing required parameters and asserts the model attributes, status, and view name.</p> </li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetControllerTests.java/#useful-details","title":"Useful details","text":"<p>The <code>PetControllerTests.java</code> file uses the following frameworks and dependencies:</p> <ul> <li> <p><code>org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest</code>: This annotation is used to enable the Spring MVC testing support for the <code>PetController</code> class.</p> </li> <li> <p><code>org.springframework.boot.test.mock.mockito.MockBean</code>: This annotation is used to create a mock bean of the <code>OwnerRepository</code> class.</p> </li> <li> <p><code>org.springframework.test.web.servlet.MockMvc</code>: This class is used for testing Spring MVC controllers by providing a fake implementation of the web application.</p> </li> <li> <p><code>org.mockito.BDDMockito.given()</code>: This method is used to define the behavior of the mock objects.</p> </li> <li> <p><code>org.springframework.samples.petclinic.owner.PetController</code>: This is the class under test.</p> </li> <li> <p><code>org.springframework.samples.petclinic.owner.PetTypeFormatter</code>: This class is used as a filter for component scanning.</p> </li> </ul> <p>The code is licensed under the Apache License, Version 2.0.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java/","title":"PetTypeFormatterTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java/#overview","title":"Overview","text":"<p>This file contains the unit tests for the <code>PetTypeFormatter</code> class, which is responsible for formatting and parsing <code>PetType</code> objects. The tests cover the print and parse functionality of the <code>PetTypeFormatter</code> class.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java/#usage","title":"Usage","text":"<p>To use the <code>PetTypeFormatterTests</code> in a project, you can simply include this file in the test suite. The tests are designed to be run using a testing framework such as JUnit.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java/#methods","title":"Methods","text":"<ul> <li><code>setup()</code>: Initializes the <code>PetTypeFormatter</code> instance before each test.</li> <li><code>testPrint()</code>: Tests the print functionality of the <code>PetTypeFormatter</code> class.</li> <li><code>shouldParse()</code>: Tests the parse functionality of the <code>PetTypeFormatter</code> class.</li> <li><code>shouldThrowParseException()</code>: Tests the scenario where a parse exception should be thrown.</li> <li><code>makePetTypes()</code>: Helper method to produce sample pet types for testing purposes.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/PetTypeFormatterTests.java/#useful-details","title":"Useful details","text":"<ul> <li>This file is using JUnit 5 for writing unit tests.</li> <li>It uses Mockito for mocking the <code>OwnerRepository</code> dependency.</li> <li>The <code>PetTypeFormatter</code> class is being tested for its print and parse functionality using sample pet types.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java/","title":"VisitControllerTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java/#overview","title":"Overview","text":"<p>The <code>VisitControllerTests.java</code> file contains the test class for the <code>VisitController</code> in the <code>org.springframework.samples.petclinic.owner</code> package. It includes tests for initializing a new visit form, processing a new visit form with success, and processing a new visit form that has errors. This file is a part of the larger Spring PetClinic software project and is responsible for testing the functionality of the <code>VisitController</code> class.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 8 or higher</li> <li>Spring Boot</li> <li>JUnit 5</li> <li>Mockito</li> <li>MockMvc</li> <li>OwnerRepository</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java/#usage","title":"Usage","text":"<p>To use the <code>VisitControllerTests</code> class in a project, follow these steps: 1. Import the required packages:    <pre><code>import org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.context.aot.DisabledInAotMode;\nimport org.springframework.test.web.servlet.MockMvc;\n</code></pre></p> <ol> <li> <p>Ensure that the <code>OwnerRepository</code> is available.</p> </li> <li> <p>Use the <code>@WebMvcTest</code> annotation to test the <code>VisitController</code>:    <pre><code>@WebMvcTest(VisitController.class)\n</code></pre></p> </li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java/#methods","title":"Methods","text":"<ul> <li><code>init()</code>: Initializes an <code>Owner</code> and a <code>Pet</code> and sets up a mock response using the <code>owners</code> repository.</li> <li><code>testInitNewVisitForm()</code>: Tests the initialization of a new visit form by performing a GET request and expecting a specific view name.</li> <li><code>testProcessNewVisitFormSuccess()</code>: Tests the processing of a new visit form with success by performing a POST request with parameters and expecting a redirection to a specific view.</li> <li><code>testProcessNewVisitFormHasErrors()</code>: Tests the processing of a new visit form that has errors by performing a POST request with incorrect parameters and expecting specific attributes and view name.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/owner/VisitControllerTests.java/#useful-details","title":"Useful details","text":"<ul> <li>Spring Boot test annotations (<code>@WebMvcTest</code>, <code>@MockBean</code>, etc.) are used for testing the <code>VisitController</code>.</li> <li>The <code>MockMvc</code> instance is autowired for performing mock HTTP requests and verifying responses.</li> <li>The tests are written using JUnit 5 and utilize the Mockito framework for mocking dependencies.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java/","title":"ClinicServiceTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java/#overview","title":"Overview","text":"<p>This Java class is responsible for performing integration tests on the Service and Repository layers of the software project. It tests the functionalities of the clinic service using the Spring TestContext Framework. The class ensures that the service and repository components are working correctly and are able to interact with the database.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>This class requires the Spring TestContext Framework.</li> <li>It also requires the Spring Data JPA framework.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java/#usage","title":"Usage","text":"<p>To use this class in a project: 1. Make sure the project has the necessary dependencies mentioned in the Prerequisites section. 2. Instantiate an object of the ClinicServiceTests class. 3. Use the various test methods provided in the class to test the functionalities of the clinic service.</p> <p>Example: <pre><code>ClinicServiceTests clinicServiceTests = new ClinicServiceTests();\nclinicServiceTests.shouldFindOwnersByLastName();\n</code></pre></p>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java/#methods","title":"Methods","text":"<ol> <li> <p><code>shouldFindOwnersByLastName()</code>: This method tests the functionality of finding owners by their last name. It verifies that the correct number of owners is returned based on the last name provided as a parameter.</p> </li> <li> <p><code>shouldFindSingleOwnerWithPet()</code>: This method tests the functionality of finding a single owner with their pet. It verifies that the owner's last name, the number of pets, and the type of the pet are correct.</p> </li> <li> <p><code>shouldInsertOwner()</code>: This method tests the functionality of inserting a new owner into the database. It verifies that the owner is saved successfully and has a generated ID.</p> </li> <li> <p><code>shouldUpdateOwner()</code>: This method tests the functionality of updating an existing owner's last name. It verifies that the owner's last name is updated correctly in the database.</p> </li> <li> <p><code>shouldFindAllPetTypes()</code>: This method tests the functionality of finding all pet types. It verifies that the correct pet types are returned from the database.</p> </li> <li> <p><code>shouldInsertPetIntoDatabaseAndGenerateId()</code>: This method tests the functionality of inserting a new pet into the database. It verifies that the pet is saved successfully and has a generated ID.</p> </li> <li> <p><code>shouldUpdatePetName()</code>: This method tests the functionality of updating an existing pet's name. It verifies that the pet's name is updated correctly in the database.</p> </li> <li> <p><code>shouldFindVets()</code>: This method tests the functionality of finding all vets. It verifies that the correct vets are returned from the database.</p> </li> <li> <p><code>shouldAddNewVisitForPet()</code>: This method tests the functionality of adding a new visit for a pet. It verifies that the visit is added successfully and has a generated ID.</p> </li> <li> <p><code>shouldFindVisitsByPetId()</code>: This method tests the functionality of finding visits by pet ID. It verifies that the correct visits are returned for the given pet ID.</p> </li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/ClinicServiceTests.java/#useful-details","title":"Useful details","text":"<ul> <li>This class is an integration test and is used to test the integration of the Service and Repository layers of the software project.</li> <li>It is annotated with the <code>@DataJpaTest</code> annotation to enable testing with the Spring Data JPA framework.</li> <li>It is also annotated with the <code>@AutoConfigureTestDatabase</code> annotation to configure the test database. The <code>Replace.NONE</code> option ensures that the real database is used instead of an in-memory database.</li> <li>The class includes dependencies on the <code>OwnerRepository</code> and <code>VetRepository</code> interfaces, which are used to interact with the database.</li> <li>The class includes various test methods that test different functionalities of the clinic service, such as finding owners, pets, vets, and visits, as well as inserting and updating owners and pets.</li> <li>The test methods are annotated with the <code>@Test</code> annotation to indicate that they are test methods.</li> <li>The class also includes some utility methods and variables for testing purposes.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java/","title":"EntityUtils.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java/#overview","title":"Overview","text":"<p>The EntityUtils.java file contains utility methods for handling entities in a software project. It is separate from the BaseEntity class due to its dependency on the ORM-associated ObjectRetrievalFailureException. This file provides a method to look up an entity of a given class with a given id in a collection.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java/#usage","title":"Usage","text":"<p>To utilize the EntityUtils class in a project, it can be instantiated and used to look up entities in a collection using the provided method.</p> <pre><code>Collection&lt;BaseEntity&gt; entities = // populate collection with entities\nEntityUtils.getById(entities, BaseEntity.class, entityId);\n</code></pre>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java/#methods","title":"Methods","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java/#getbyid","title":"getById","text":"<p><pre><code>public static &lt;T extends BaseEntity&gt; T getById(Collection&lt;T&gt; entities, Class&lt;T&gt; entityClass, int entityId)\n        throws ObjectRetrievalFailureException\n</code></pre> Look up the entity of the given class with the given id in the given collection. - Parameters:   - entities: the collection to search   - entityClass: the entity class to look up   - entityId: the entity id to look up - Returns:   - The found entity - Throws:   - ObjectRetrievalFailureException: if the entity was not found</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/service/EntityUtils.java/#useful-details","title":"Useful details","text":"<ul> <li>Version: 29.10.2003</li> <li>Frameworks: Spring Framework</li> <li>Dependencies: Spring ORM, ObjectRetrievalFailureException</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java/","title":"CrashControllerIntegrationTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java/#overview","title":"Overview","text":"<p>This Java class serves as an Integration Test for the CrashController. It contains test cases for triggering exceptions in both JSON and HTML formats.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>This file has dependencies on Spring Boot and Spring Framework.</li> <li>Requires access to a server with the specified port.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java/#usage","title":"Usage","text":"<p>To use this file in a project: - Ensure that the project has the necessary dependencies on Spring Boot and Spring Framework. - Instantiate the CrashControllerIntegrationTests class and run the test methods.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java/#methods","title":"Methods","text":"<ul> <li><code>testTriggerExceptionJson()</code>: Sends an HTTP request to trigger an exception in JSON format and asserts the response.</li> <li><code>testTriggerExceptionHtml()</code>: Sends an HTTP request to trigger an exception in HTML format and asserts the response.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerIntegrationTests.java/#useful-details","title":"Useful details","text":"<ul> <li>The class is annotated with <code>@SpringBootTest</code> which sets the web environment to RANDOM_PORT and includes specific properties.</li> <li>It uses <code>TestRestTemplate</code> for making HTTP requests and handling responses.</li> <li>It contains a nested class <code>TestConfiguration</code> for configuring the application context during testing.</li> <li>Utilizes various Spring annotations such as <code>@Autowired</code> and <code>@Value</code> for dependency injection and property configuration.</li> <li>Excludes specific auto-configurations using the <code>@SpringBootApplication</code> annotation in the <code>TestConfiguration</code> class.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java/","title":"CrashControllerTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java/#overview","title":"Overview","text":"<p>The <code>CrashControllerTests</code> Java class is a test class for the <code>CrashController</code>. It is responsible for testing the functionality of the <code>CrashController</code> class by triggering an exception and verifying the expected behavior.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java/#usage","title":"Usage","text":"<p>To use the <code>CrashControllerTests</code> class in a project, you can create an instance of the class and run the test methods to verify the behavior of the <code>CrashController</code> class.</p> <pre><code>CrashControllerTests test = new CrashControllerTests();\ntest.testTriggerException();\n</code></pre>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java/#methods","title":"Methods","text":"<ul> <li><code>testTriggerException()</code>: Method to test the <code>triggerException()</code> method of the <code>CrashController</code> class. It triggers an exception and verifies the expected behavior.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/system/CrashControllerTests.java/#useful-details","title":"Useful details","text":"<ul> <li>This file is associated with the <code>CrashController</code> class.</li> <li>The test class is using JUnit 5 for writing unit tests.</li> <li>The test class is used to verify the behavior of the <code>CrashController</code> class when an exception is triggered.</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java/","title":"VetControllerTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java/#overview","title":"Overview","text":"<p>The VetControllerTests.java file is a test class for the VetController. It contains test methods for the VetController class to ensure its functionality in a software project.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java/#prerequisites","title":"Prerequisites","text":"<ul> <li>Dependencies:</li> <li>Spring Boot</li> <li>JUnit 5</li> <li>MockMvc</li> <li>Mockito</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java/#usage","title":"Usage","text":"<p>To utilize the VetControllerTests class in a project, follow these steps: 1. Ensure that the project includes the required dependencies listed in the prerequisites section. 2. Instantiate the VetControllerTests class. 3. Run the test methods to validate the functionality of the VetController.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java/#methods","title":"Methods","text":"<p>The VetControllerTests class contains the following test methods: 1. <code>testShowVetListHtml()</code>: Tests the display of vet list in HTML format.    - Parameters: None    - Returns: None    - Example:      <pre><code>@Test\nvoid testShowVetListHtml() throws Exception {\n    mockMvc.perform(MockMvcRequestBuilders.get(\"/vets.html?page=1\"))\n        .andExpect(status().isOk())\n        .andExpect(model().attributeExists(\"listVets\"))\n        .andExpect(view().name(\"vets/vetList\"));\n}\n</code></pre></p> <ol> <li><code>testShowResourcesVetList()</code>: Tests the display of vet list in JSON format.</li> <li>Parameters: None</li> <li>Returns: None</li> <li>Example:      <pre><code>@Test\nvoid testShowResourcesVetList() throws Exception {\n    ResultActions actions = mockMvc.perform(get(\"/vets\").accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk());\n    actions.andExpect(content().contentType(MediaType.APPLICATION_JSON))\n        .andExpect(jsonPath(\"$.vetList[0].id\").value(1));\n}\n</code></pre></li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetControllerTests.java/#useful-details","title":"Useful details","text":"<ul> <li>Framework: Spring Boot</li> <li>Test Annotations: @WebMvcTest, @DisabledInNativeImage, @DisabledInAotMode</li> <li>Dependencies: VetRepository, MockMvc, MediaType</li> </ul>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetTests.java/","title":"VetTests.java","text":""},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetTests.java/#overview","title":"Overview","text":"<p>The VetTests.java file contains a JUnit test class for testing the serialization of the Vet class. It ensures that the serialization and deserialization process of the Vet class works as expected.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetTests.java/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Usage</li> <li>Methods</li> <li>Useful details</li> </ol>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetTests.java/#prerequisites","title":"Prerequisites","text":"<p>There are no specific dependencies or prerequisites required to use this file.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetTests.java/#usage","title":"Usage","text":"<p>To use the VetTests class in a project, follow these steps: 1. Ensure that the project includes JUnit 5 for running the tests. 2. Create an instance of the VetTests class and run the testSerialization() method.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetTests.java/#methods","title":"Methods","text":"<p>The VetTests class contains the following method:</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetTests.java/#testserialization","title":"testSerialization()","text":"<p>This method tests the serialization and deserialization of the Vet class. It creates a Vet object, serializes it, deserializes it, and then asserts that the deserialized object is equal to the original object.</p>"},{"location":"src/test/java/org/springframework/samples/petclinic/vet/VetTests.java/#useful-details","title":"Useful details","text":"<ul> <li>This file is part of the Spring PetClinic project.</li> <li>The testSerialization() method uses JUnit 5 for writing the test.</li> <li>The Vet class being tested is a part of the Spring PetClinic domain model.</li> </ul>"},{"location":"test-cases/overview/","title":"Gherkin","text":"<p>This curated list showcases Gherkin features generated by our GEN-AI pipeline, leveraging advanced LLM to discover scripts based on your code. These features are tailored to optimize test automation, enhancing efficiency and effectiveness in your software testing endeavors. Explore this resource to streamline your testing processes and elevate your development workflow with precision-generated scripts.</p>"},{"location":"test-cases/overview/#ownercontrollerfeature","title":"OwnerController.feature","text":"<pre><code>Feature: Owner Management\n\n  Background: \n    Given the PetClinic application is running at 'https://petclinic.example.com'\n\n  Scenario: Initiate creation of a new owner\n    When I send a GET request to '/owners/new'\n    Then the response status should be 200\n    And the response should contain the owner creation form\n\n  Scenario Outline: Successfully create a new owner\n    Given I have the following owner details\n      | firstName | lastName | address      | city    | telephone |\n      | &lt;firstName&gt; | &lt;lastName&gt; | &lt;address&gt; | &lt;city&gt; | &lt;telephone&gt; |\n    When I send a POST request to '/owners/new' with the given details\n    Then the response status should be 302\n    And the response 'Location' header should be a valid owner URI\n\n  Examples:\n    | firstName | lastName | address       | city    | telephone |\n    | John      | Doe      | 123 Main St.  | Anytown | 1234567890 |\n    | Jane      | Roe      | 456 Elm St.   | Newtown | 9876543210 |\n\n  Scenario: Attempt to create a new owner with missing required fields\n    Given I have the following owner details with missing 'lastName'\n      | firstName | address      | city    | telephone |\n      | John      | 123 Main St. | Anytown | 1234567890 |\n    When I send a POST request to '/owners/new' with the given details\n    Then the response status should indicate a client error\n\n  # Add cleanup scenarios if needed\n</code></pre>"},{"location":"test-cases/overview/#petcontrollerfeature","title":"PetController.feature","text":"<pre><code>Feature: Pet Management\n\n  Background: \n    Given the PetClinic application is running at 'https://petclinic.example.com'\n\n  Scenario Outline: Initiate creation of a new pet\n    Given an owner with ID &lt;ownerId&gt; exists\n    When I send a GET request to '/owners/{ownerId}/pets/new'\n    Then the response status should be 200\n    And the response should contain the pet creation form\n\n  Scenario Outline: Successfully create a new pet\n    Given an owner with ID &lt;ownerId&gt; exists\n    And I have the following pet details\n      | name    | birthDate  | type        |\n      | &lt;name&gt;  | &lt;birthDate&gt;| &lt;type&gt;      |\n    When I send a POST request to '/owners/{ownerId}/pets/new' with the given details\n    Then the response status should be 302\n    And the response 'Location' header should be '/owners/{ownerId}'\n\n  Examples:\n    | ownerId | name      | birthDate  | type      |\n    | 1       | Bella     | 2021-08-15 | Dog       |\n    | 2       | Whiskers  | 2020-11-01 | Cat       |\n\n  Scenario: Attempt to create a new pet with missing required fields\n    Given an owner with ID 1 exists\n    When I send a POST request to '/owners/1/pets/new' with missing 'name'\n    Then the response status should indicate a client error\n\n  # Add cleanup scenarios if needed\n</code></pre>"},{"location":"test-cases/overview/#vetcontrollerfeature","title":"VetController.feature","text":"<pre><code>Feature: Vet Management\n\n  Background: \n    Given the PetClinic application is running at 'https://petclinic.example.com'\n\n  Scenario: List all vets\n    When I send a GET request to '/vets'\n    Then the response status should be 200\n    And the response should contain a list of vets\n\n  Scenario Outline: Show vet list page with pagination\n    When I send a GET request to '/vets.html' with the query parameter 'page' set to &lt;page&gt;\n    Then the response status should be 200\n    And the response should contain a vet list page for page number &lt;page&gt;\n\n  Examples:\n    | page |\n    | 1    |\n    | 2    |\n    | 3    |\n\n  # Additional scenarios can be added for error cases or specific vet details\n</code></pre>"},{"location":"test-cases/overview/#visitcontrollerfeature","title":"VisitController.feature","text":"<pre><code>Feature: Visit Management\n\n  Background: \n    Given the PetClinic application is running at 'https://petclinic.example.com'\n\n  Scenario Outline: Initiate creation of a new visit\n    Given an owner with ID &lt;ownerId&gt; exists\n    And a pet with ID &lt;petId&gt; belonging to the owner exists\n    When I send a GET request to '/owners/{ownerId}/pets/{petId}/visits/new'\n    Then the response status should be 200\n    And the response should contain the visit creation form\n\n  Scenario Outline: Successfully create a new visit\n    Given an owner with ID &lt;ownerId&gt; exists\n    And a pet with ID &lt;petId&gt; belonging to the owner exists\n    And I have the following visit details\n      | date       | description       |\n      | &lt;date&gt;     | &lt;description&gt;     |\n    When I send a POST request to '/owners/{ownerId}/pets/{petId}/visits/new' with the given details\n    Then the response status should be 302\n    And the response 'Location' header should be '/owners/{ownerId}'\n\n  Examples:\n    | ownerId | petId | date       | description         |\n    | 1       | 2     | 2023-04-12 | Annual vaccination  |\n    | 3       | 4     | 2023-05-19 | General checkup     |\n\n  Scenario: Attempt to create a new visit with missing required fields\n    Given an owner with ID 1 exists\n    And a pet with ID 2 belonging to the owner exists\n    When I send a POST request to '/owners/1/pets/2/visits/new' with missing 'description'\n    Then the response status should indicate a client error\n\n  # Add cleanup scenarios if needed\n</code></pre>"}]}